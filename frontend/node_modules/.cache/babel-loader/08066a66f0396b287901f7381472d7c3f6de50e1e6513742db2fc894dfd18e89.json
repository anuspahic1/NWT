{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\pages\\\\DoctorProfilePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useAuth } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GATEWAY_BASE_URL = 'http://localhost:8081';\nconst KORISNICI_DOKTORI_API_PREFIX = `${GATEWAY_BASE_URL}/api/korisnici-doktori`;\nconst TERMINI_PREGLEDI_API_PREFIX = `${GATEWAY_BASE_URL}/api/termini-pregledi`;\nfunction DoctorProfilePage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const {\n    token,\n    user,\n    loading: authLoading\n  } = useAuth();\n  const navigate = useNavigate();\n  const [doctor, setDoctor] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  // availableTerms sada čuva objekte s datumom i vremenom\n  const [availableTerms, setAvailableTerms] = useState([]);\n  // selectedDate je uklonjen jer više ne biramo datum ručno\n  const [selectedTermId, setSelectedTermId] = useState(''); // Novi state za ID odabranog termina\n  const [reason, setReason] = useState('');\n  const [bookingMessage, setBookingMessage] = useState('');\n  const [bookingMessageType, setBookingMessageType] = useState('success');\n  const memoizedAuthHeaders = useMemo(() => {\n    return token ? {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    } : {};\n  }, [token]);\n  const fetchDoctorDetails = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const apiUrl = `${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${id}`;\n      const response = await axios.get(apiUrl);\n      const data = response.data;\n      const transformedDoctor = {\n        doktorID: data.doktorID,\n        ime: data.ime,\n        prezime: data.prezime,\n        fullName: `${data.ime} ${data.prezime}`,\n        email: data.email,\n        telefon: data.telefon,\n        specijalizacije: Array.isArray(data.specijalizacije) ? data.specijalizacije.join(', ') : data.specijalizacije,\n        grad: data.grad,\n        radnoVrijeme: data.radnoVrijeme,\n        iskustvo: data.iskustvo,\n        ocjena: data.ocjena,\n        profileImageBase64: data.profileImageBase64 || `https://placehold.co/100x100/CCCCCC/000000?text=${data.ime.charAt(0)}${data.prezime.charAt(0)}`\n      };\n      setDoctor(transformedDoctor);\n    } catch (err) {\n      var _err$response;\n      console.error(\"Greška prilikom dohvaćanja detalja doktora:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      setError(\"Nije moguće učitati profil doktora. Molimo pokušajte ponovo.\");\n    } finally {\n      setLoading(false);\n    }\n  }, [id]);\n\n  // Novi useEffect za dohvaćanje SVIH dostupnih termina za doktora\n  useEffect(() => {\n    const fetchAllAvailableTerms = async () => {\n      if (!(doctor !== null && doctor !== void 0 && doctor.doktorID) || !token) {\n        setAvailableTerms([]);\n        return;\n      }\n      try {\n        // Endpoint za dohvaćanje svih termina za određenog doktora\n        // Pretpostavljamo da backend ima endpoint /api/termini/doktor/{doktorID}\n        const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/doktor/${doctor.doktorID}`, memoizedAuthHeaders);\n        const termsData = Array.isArray(response.data) ? response.data : [];\n\n        // Filtrirajte samo dostupne termine i one u budućnosti\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Postavite na početak dana za usporedbu\n\n        const availableFutureTerms = termsData.filter(term => {\n          const termDate = new Date(term.datum);\n          // Provjerite je li termin dostupan i je li datum u budućnosti ili je danas i vrijeme je u budućnosti\n          return term.statusTermina === 'DOSTUPAN' && (termDate > today || termDate.toDateString() === today.toDateString() && new Date(`2000/01/01 ${term.vrijeme}`).getTime() > new Date().getTime());\n        }).map(term => ({\n          terminID: term.terminID,\n          datum: term.datum,\n          // zadržavamo datum\n          vrijeme: term.vrijeme,\n          // zadržavamo vrijeme\n          display: `${new Date(term.datum).toLocaleDateString('bs-BA')} - ${term.vrijeme.substring(0, 5)}` // Format za prikaz\n        })).sort((a, b) => {\n          // Sortiranje prvo po datumu, zatim po vremenu\n          const dateA = new Date(`${a.datum}T${a.vrijeme}`);\n          const dateB = new Date(`${b.datum}T${b.vrijeme}`);\n          return dateA.getTime() - dateB.getTime();\n        });\n        setAvailableTerms(availableFutureTerms);\n        if (availableFutureTerms.length > 0) {\n          setSelectedTermId(availableFutureTerms[0].terminID); // Postavi prvi dostupan termin kao default\n        } else {\n          setSelectedTermId('');\n        }\n      } catch (err) {\n        var _err$response2;\n        console.error('Greška pri dohvaćanju svih dostupnih termina:', ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data) || err.message);\n        setAvailableTerms([]);\n        setBookingMessage('Greška pri dohvaćanju dostupnih termina.');\n        setBookingMessageType('danger');\n      }\n    };\n\n    // Pozovi ovu funkciju samo kada se doctor objekat i token učitaju\n    if (doctor !== null && doctor !== void 0 && doctor.doktorID && token) {\n      fetchAllAvailableTerms();\n    }\n  }, [doctor, token, memoizedAuthHeaders]);\n  useEffect(() => {\n    if (id) {\n      fetchDoctorDetails();\n    }\n  }, [id, fetchDoctorDetails]);\n  const handleTermChange = e => {\n    setSelectedTermId(e.target.value);\n  };\n  const handleReasonChange = e => {\n    setReason(e.target.value);\n  };\n  const handleBookAppointment = async e => {\n    e.preventDefault();\n    setBookingMessage('');\n    if (!user || !token) {\n      setBookingMessage('Morate biti prijavljeni da biste zakazali pregled.');\n      setBookingMessageType('danger');\n      return;\n    }\n    if (!user.roles || !user.roles.includes('ROLE_PACIJENT')) {\n      setBookingMessage('Samo pacijenti mogu zakazivati preglede.');\n      setBookingMessageType('danger');\n      return;\n    }\n    if (!selectedTermId || !reason || !(doctor !== null && doctor !== void 0 && doctor.doktorID)) {\n      setBookingMessage('Molimo odaberite termin i popunite razlog za pregled.');\n      setBookingMessageType('danger');\n      return;\n    }\n    const selectedTerm = availableTerms.find(term => String(term.terminID) === selectedTermId);\n    if (!selectedTerm) {\n      setBookingMessage('Odabrani termin nije važeći ili dostupan.');\n      setBookingMessageType('danger');\n      return;\n    }\n    try {\n      const pacijentId = user === null || user === void 0 ? void 0 : user.pacijentId;\n      if (!pacijentId) {\n        setBookingMessage('Vaš ID pacijenta nije pronađen. Molimo osigurajte da ste prijavljeni kao pacijent i da je vaš profil pacijenta kreiran.');\n        setBookingMessageType('danger');\n        return;\n      }\n      const appointmentData = {\n        pacijentID: pacijentId,\n        doktorID: doctor.doktorID,\n        terminID: selectedTerm.terminID,\n        // šaljemo cijeli ID termina\n        datumPregleda: selectedTerm.datum,\n        // Koristimo datum iz odabranog termina\n        vrijemePregleda: selectedTerm.vrijeme + ':00',\n        // Osigurajte HH:MM:SS format za backend\n        komentarPacijenta: reason,\n        status: 'zakazan'\n      };\n      await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, appointmentData, memoizedAuthHeaders);\n      setBookingMessage('Pregled uspješno zakazan!');\n      setBookingMessageType('success');\n      setReason('');\n      setSelectedTermId(''); // Resetuj odabrani termin\n      // Ponovo dohvati dostupne termine nakon uspješne rezervacije\n      // da se ukloni upravo zauzeti termin\n      // Moramo ponovno pozvati fetchAllAvailableTerms funkciju izvan ovog contexta\n      // Zbog useCallback, moramo je proći kao dependency ili je ponovno definirati\n      // No, jednostavnije je okidati ponovno dohvaćanje preko doctor i token stanja\n      // ako se useEffect za fetchAllAvailableTerms oslanja na njih\n      // U ovom slučaju, ponovno dohvaćanje će se dogoditi kada se promjene doctor ili token\n      // što je ok, jer se token ne mijenja, ali doctor se ne mijenja, pa je bolji eksplicitni poziv.\n      fetchDoctorDetails(); // Ovo će indirektno okidati fetchAllAvailableTerms ponovo\n      // zbog doctor dependency u drugom useEffectu\n      setLoading(true); // Privremeno postavite loading da se prikaže spinner dok se ponovno učitava\n    } catch (err) {\n      var _err$response3, _err$response4, _err$response4$data;\n      console.error(\"Greška pri zakazivanju pregleda:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n      setBookingMessage(`Greška pri zakazivanju pregleda: ${((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message}`);\n      setBookingMessageType('danger');\n    }\n  };\n  if (authLoading || loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"U\\u010Ditavanje...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container py-5 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead text-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/service\",\n        className: \"btn btn-primary\",\n        children: \"Nazad na listu doktora\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this);\n  }\n  if (!doctor) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container py-5 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"lead\",\n        children: \"Doktor nije prona\\u0111en.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/service\",\n        className: \"btn btn-primary\",\n        children: \"Nazad na listu doktora\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  }\n  const renderBookingSection = () => {\n    if (!user) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info text-center\",\n        role: \"alert\",\n        children: [\"Molimo \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          className: \"alert-link\",\n          children: \"prijavite se\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 28\n        }, this), \" ili \", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/sign-up\",\n          className: \"alert-link\",\n          children: \"registrujte se\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 93\n        }, this), \" da biste zakazali pregled.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this);\n    } else if (!user.roles || !user.roles.includes('ROLE_PACIJENT')) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-warning text-center\",\n        role: \"alert\",\n        children: \"Samo pacijenti mogu zakazivati preglede.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleBookAppointment,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row mb-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"appointmentTerm\",\n              className: \"form-label\",\n              children: \"Dostupni termini\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              id: \"appointmentTerm\",\n              value: selectedTermId,\n              onChange: handleTermChange,\n              required: true,\n              disabled: availableTerms.length === 0,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Odaberite termin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 33\n              }, this), availableTerms.map(term => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: term.terminID,\n                children: [term.display, \" \"]\n              }, term.terminID, true, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 29\n            }, this), availableTerms.length === 0 && /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-muted mt-2\",\n              children: \"Nema dostupnih termina za ovog doktora.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"reason\",\n            className: \"form-label\",\n            children: \"Razlog za pregled\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"form-control\",\n            id: \"reason\",\n            rows: \"3\",\n            value: reason,\n            onChange: handleReasonChange,\n            placeholder: \"Kratak opis razloga za pregled...\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-danger\",\n          children: \"Zaka\\u017Ei pregled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow-lg p-4 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row g-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4 text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: doctor.profileImageBase64,\n            alt: doctor.fullName,\n            className: \"img-fluid rounded-circle shadow-sm mb-3\",\n            style: {\n              width: '150px',\n              height: '150px',\n              objectFit: 'cover',\n              border: '3px solid #dc3545'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-1\",\n            children: doctor.fullName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-muted\",\n            children: doctor.specijalizacije\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-center align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-warning me-1\",\n              children: \"\\u2605\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"fw-bold\",\n              children: doctor.ocjena ? doctor.ocjena.toFixed(1) : 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-muted ms-2\",\n              children: [\"(\", doctor.grad, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-outline-secondary btn-sm ms-3\",\n              onClick: fetchDoctorDetails // Pozovi funkciju za dohvaćanje detalja doktora (koja okida i dohvat termina)\n              ,\n              disabled: loading // Onemogući dugme dok se učitava\n              ,\n              children: loading ? 'Osvježavanje...' : 'Osvježi profil'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-danger mb-3\",\n            children: \"Informacije o doktoru\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Email:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 28\n            }, this), \" \", doctor.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Telefon:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 28\n            }, this), \" \", doctor.telefon]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Grad:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 28\n            }, this), \" \", doctor.grad]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Radno vrijeme:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 28\n            }, this), \" \", doctor.radnoVrijeme]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Godine iskustva:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 28\n            }, this), \" \", doctor.iskustvo]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card shadow-lg p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-danger mb-3\",\n        children: \"Zaka\\u017Eite pregled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), bookingMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `alert alert-${bookingMessageType} mb-3`,\n        role: \"alert\",\n        children: bookingMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }, this), renderBookingSection()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 9\n  }, this);\n}\n_s(DoctorProfilePage, \"d12BWmh8xFpMF9fA2bmc+60KsU4=\", false, function () {\n  return [useParams, useAuth, useNavigate];\n});\n_c = DoctorProfilePage;\nexport default DoctorProfilePage;\nvar _c;\n$RefreshReg$(_c, \"DoctorProfilePage\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","useParams","Link","useNavigate","axios","useAuth","jsxDEV","_jsxDEV","GATEWAY_BASE_URL","KORISNICI_DOKTORI_API_PREFIX","TERMINI_PREGLEDI_API_PREFIX","DoctorProfilePage","_s","id","token","user","loading","authLoading","navigate","doctor","setDoctor","setLoading","error","setError","availableTerms","setAvailableTerms","selectedTermId","setSelectedTermId","reason","setReason","bookingMessage","setBookingMessage","bookingMessageType","setBookingMessageType","memoizedAuthHeaders","headers","fetchDoctorDetails","apiUrl","response","get","data","transformedDoctor","doktorID","ime","prezime","fullName","email","telefon","specijalizacije","Array","isArray","join","grad","radnoVrijeme","iskustvo","ocjena","profileImageBase64","charAt","err","_err$response","console","message","fetchAllAvailableTerms","termsData","today","Date","setHours","availableFutureTerms","filter","term","termDate","datum","statusTermina","toDateString","vrijeme","getTime","map","terminID","display","toLocaleDateString","substring","sort","a","b","dateA","dateB","length","_err$response2","handleTermChange","e","target","value","handleReasonChange","handleBookAppointment","preventDefault","roles","includes","selectedTerm","find","String","pacijentId","appointmentData","pacijentID","datumPregleda","vrijemePregleda","komentarPacijenta","status","post","_err$response3","_err$response4","_err$response4$data","className","style","minHeight","children","role","fileName","_jsxFileName","lineNumber","columnNumber","to","renderBookingSection","onSubmit","htmlFor","onChange","required","disabled","rows","placeholder","type","src","alt","width","height","objectFit","border","toFixed","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/pages/DoctorProfilePage.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { useParams, Link, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\nconst GATEWAY_BASE_URL = 'http://localhost:8081';\r\nconst KORISNICI_DOKTORI_API_PREFIX = `${GATEWAY_BASE_URL}/api/korisnici-doktori`;\r\nconst TERMINI_PREGLEDI_API_PREFIX = `${GATEWAY_BASE_URL}/api/termini-pregledi`;\r\n\r\nfunction DoctorProfilePage() {\r\n    const { id } = useParams();\r\n    const { token, user, loading: authLoading } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    const [doctor, setDoctor] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    // availableTerms sada čuva objekte s datumom i vremenom\r\n    const [availableTerms, setAvailableTerms] = useState([]);\r\n    // selectedDate je uklonjen jer više ne biramo datum ručno\r\n    const [selectedTermId, setSelectedTermId] = useState(''); // Novi state za ID odabranog termina\r\n    const [reason, setReason] = useState('');\r\n    const [bookingMessage, setBookingMessage] = useState('');\r\n    const [bookingMessageType, setBookingMessageType] = useState('success');\r\n\r\n    const memoizedAuthHeaders = useMemo(() => {\r\n        return token ? { headers: { 'Authorization': `Bearer ${token}` } } : {};\r\n    }, [token]);\r\n\r\n    const fetchDoctorDetails = useCallback(async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const apiUrl = `${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${id}`;\r\n            const response = await axios.get(apiUrl);\r\n            const data = response.data;\r\n\r\n            const transformedDoctor = {\r\n                doktorID: data.doktorID,\r\n                ime: data.ime,\r\n                prezime: data.prezime,\r\n                fullName: `${data.ime} ${data.prezime}`,\r\n                email: data.email,\r\n                telefon: data.telefon,\r\n                specijalizacije: Array.isArray(data.specijalizacije) ? data.specijalizacije.join(', ') : data.specijalizacije,\r\n                grad: data.grad,\r\n                radnoVrijeme: data.radnoVrijeme,\r\n                iskustvo: data.iskustvo,\r\n                ocjena: data.ocjena,\r\n                profileImageBase64: data.profileImageBase64 || `https://placehold.co/100x100/CCCCCC/000000?text=${data.ime.charAt(0)}${data.prezime.charAt(0)}`\r\n            };\r\n            setDoctor(transformedDoctor);\r\n        } catch (err) {\r\n            console.error(\"Greška prilikom dohvaćanja detalja doktora:\", err.response?.data || err.message);\r\n            setError(\"Nije moguće učitati profil doktora. Molimo pokušajte ponovo.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [id]);\r\n\r\n    // Novi useEffect za dohvaćanje SVIH dostupnih termina za doktora\r\n    useEffect(() => {\r\n        const fetchAllAvailableTerms = async () => {\r\n            if (!doctor?.doktorID || !token) {\r\n                setAvailableTerms([]);\r\n                return;\r\n            }\r\n            try {\r\n                // Endpoint za dohvaćanje svih termina za određenog doktora\r\n                // Pretpostavljamo da backend ima endpoint /api/termini/doktor/{doktorID}\r\n                const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/doktor/${doctor.doktorID}`, memoizedAuthHeaders);\r\n                const termsData = Array.isArray(response.data) ? response.data : [];\r\n\r\n                // Filtrirajte samo dostupne termine i one u budućnosti\r\n                const today = new Date();\r\n                today.setHours(0, 0, 0, 0); // Postavite na početak dana za usporedbu\r\n\r\n                const availableFutureTerms = termsData\r\n                    .filter(term => {\r\n                        const termDate = new Date(term.datum);\r\n                        // Provjerite je li termin dostupan i je li datum u budućnosti ili je danas i vrijeme je u budućnosti\r\n                        return term.statusTermina === 'DOSTUPAN' &&\r\n                               (termDate > today ||\r\n                                (termDate.toDateString() === today.toDateString() && new Date(`2000/01/01 ${term.vrijeme}`).getTime() > new Date().getTime()));\r\n                    })\r\n                    .map(term => ({\r\n                        terminID: term.terminID,\r\n                        datum: term.datum, // zadržavamo datum\r\n                        vrijeme: term.vrijeme, // zadržavamo vrijeme\r\n                        display: `${new Date(term.datum).toLocaleDateString('bs-BA')} - ${term.vrijeme.substring(0, 5)}` // Format za prikaz\r\n                    }))\r\n                    .sort((a, b) => {\r\n                        // Sortiranje prvo po datumu, zatim po vremenu\r\n                        const dateA = new Date(`${a.datum}T${a.vrijeme}`);\r\n                        const dateB = new Date(`${b.datum}T${b.vrijeme}`);\r\n                        return dateA.getTime() - dateB.getTime();\r\n                    });\r\n\r\n                setAvailableTerms(availableFutureTerms);\r\n                if (availableFutureTerms.length > 0) {\r\n                    setSelectedTermId(availableFutureTerms[0].terminID); // Postavi prvi dostupan termin kao default\r\n                } else {\r\n                    setSelectedTermId('');\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error('Greška pri dohvaćanju svih dostupnih termina:', err.response?.data || err.message);\r\n                setAvailableTerms([]);\r\n                setBookingMessage('Greška pri dohvaćanju dostupnih termina.');\r\n                setBookingMessageType('danger');\r\n            }\r\n        };\r\n\r\n        // Pozovi ovu funkciju samo kada se doctor objekat i token učitaju\r\n        if (doctor?.doktorID && token) {\r\n            fetchAllAvailableTerms();\r\n        }\r\n    }, [doctor, token, memoizedAuthHeaders]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            fetchDoctorDetails();\r\n        }\r\n    }, [id, fetchDoctorDetails]);\r\n\r\n\r\n    const handleTermChange = (e) => {\r\n        setSelectedTermId(e.target.value);\r\n    };\r\n\r\n    const handleReasonChange = (e) => {\r\n        setReason(e.target.value);\r\n    };\r\n\r\n    const handleBookAppointment = async (e) => {\r\n        e.preventDefault();\r\n        setBookingMessage('');\r\n\r\n        if (!user || !token) {\r\n            setBookingMessage('Morate biti prijavljeni da biste zakazali pregled.');\r\n            setBookingMessageType('danger');\r\n            return;\r\n        }\r\n\r\n        if (!user.roles || !user.roles.includes('ROLE_PACIJENT')) {\r\n            setBookingMessage('Samo pacijenti mogu zakazivati preglede.');\r\n            setBookingMessageType('danger');\r\n            return;\r\n        }\r\n\r\n        if (!selectedTermId || !reason || !doctor?.doktorID) {\r\n            setBookingMessage('Molimo odaberite termin i popunite razlog za pregled.');\r\n            setBookingMessageType('danger');\r\n            return;\r\n        }\r\n\r\n        const selectedTerm = availableTerms.find(term => String(term.terminID) === selectedTermId);\r\n        if (!selectedTerm) {\r\n            setBookingMessage('Odabrani termin nije važeći ili dostupan.');\r\n            setBookingMessageType('danger');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const pacijentId = user?.pacijentId;\r\n            if (!pacijentId) {\r\n                setBookingMessage('Vaš ID pacijenta nije pronađen. Molimo osigurajte da ste prijavljeni kao pacijent i da je vaš profil pacijenta kreiran.');\r\n                setBookingMessageType('danger');\r\n                return;\r\n            }\r\n\r\n            const appointmentData = {\r\n                pacijentID: pacijentId,\r\n                doktorID: doctor.doktorID,\r\n                terminID: selectedTerm.terminID, // šaljemo cijeli ID termina\r\n                datumPregleda: selectedTerm.datum, // Koristimo datum iz odabranog termina\r\n                vrijemePregleda: selectedTerm.vrijeme + ':00', // Osigurajte HH:MM:SS format za backend\r\n                komentarPacijenta: reason,\r\n                status: 'zakazan'\r\n            };\r\n            await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, appointmentData, memoizedAuthHeaders);\r\n            setBookingMessage('Pregled uspješno zakazan!');\r\n            setBookingMessageType('success');\r\n            setReason('');\r\n            setSelectedTermId(''); // Resetuj odabrani termin\r\n            // Ponovo dohvati dostupne termine nakon uspješne rezervacije\r\n            // da se ukloni upravo zauzeti termin\r\n            // Moramo ponovno pozvati fetchAllAvailableTerms funkciju izvan ovog contexta\r\n            // Zbog useCallback, moramo je proći kao dependency ili je ponovno definirati\r\n            // No, jednostavnije je okidati ponovno dohvaćanje preko doctor i token stanja\r\n            // ako se useEffect za fetchAllAvailableTerms oslanja na njih\r\n            // U ovom slučaju, ponovno dohvaćanje će se dogoditi kada se promjene doctor ili token\r\n            // što je ok, jer se token ne mijenja, ali doctor se ne mijenja, pa je bolji eksplicitni poziv.\r\n            fetchDoctorDetails(); // Ovo će indirektno okidati fetchAllAvailableTerms ponovo\r\n                                  // zbog doctor dependency u drugom useEffectu\r\n            setLoading(true); // Privremeno postavite loading da se prikaže spinner dok se ponovno učitava\r\n        } catch (err) {\r\n            console.error(\"Greška pri zakazivanju pregleda:\", err.response?.data || err.message);\r\n            setBookingMessage(`Greška pri zakazivanju pregleda: ${err.response?.data?.message || err.message}`);\r\n            setBookingMessageType('danger');\r\n        }\r\n    };\r\n\r\n    if (authLoading || loading) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '100vh' }}>\r\n                <div className=\"spinner-border text-primary\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Učitavanje...</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"container py-5 text-center\">\r\n                <p className=\"lead text-danger\">{error}</p>\r\n                <Link to=\"/service\" className=\"btn btn-primary\">Nazad na listu doktora</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!doctor) {\r\n        return (\r\n            <div className=\"container py-5 text-center\">\r\n                <p className=\"lead\">Doktor nije pronađen.</p>\r\n                <Link to=\"/service\" className=\"btn btn-primary\">Nazad na listu doktora</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderBookingSection = () => {\r\n        if (!user) {\r\n            return (\r\n                <div className=\"alert alert-info text-center\" role=\"alert\">\r\n                    Molimo <Link to=\"/login\" className=\"alert-link\">prijavite se</Link> ili <Link to=\"/sign-up\" className=\"alert-link\">registrujte se</Link> da biste zakazali pregled.\r\n                </div>\r\n            );\r\n        } else if (!user.roles || !user.roles.includes('ROLE_PACIJENT')) {\r\n            return (\r\n                <div className=\"alert alert-warning text-center\" role=\"alert\">\r\n                    Samo pacijenti mogu zakazivati preglede.\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <form onSubmit={handleBookAppointment}>\r\n                    <div className=\"row mb-3\">\r\n                        <div className=\"col-md-12\"> {/* Promijenjeno u 12 jer nema biranja datuma */}\r\n                            <label htmlFor=\"appointmentTerm\" className=\"form-label\">Dostupni termini</label>\r\n                            <select\r\n                                className=\"form-select\"\r\n                                id=\"appointmentTerm\"\r\n                                value={selectedTermId}\r\n                                onChange={handleTermChange}\r\n                                required\r\n                                disabled={availableTerms.length === 0}\r\n                            >\r\n                                <option value=\"\">Odaberite termin</option>\r\n                                {availableTerms.map(term => (\r\n                                    <option key={term.terminID} value={term.terminID}>\r\n                                        {term.display} {/* Prikazujemo formatirani datum i vrijeme */}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            {availableTerms.length === 0 && (\r\n                                <small className=\"text-muted mt-2\">Nema dostupnih termina za ovog doktora.</small>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"reason\" className=\"form-label\">Razlog za pregled</label>\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            id=\"reason\"\r\n                            rows=\"3\"\r\n                            value={reason}\r\n                            onChange={handleReasonChange}\r\n                            placeholder=\"Kratak opis razloga za pregled...\"\r\n                            required\r\n                        ></textarea>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-danger\">Zakaži pregled</button>\r\n                </form>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-5\">\r\n            <div className=\"card shadow-lg p-4 mb-4\">\r\n                <div className=\"row g-4\">\r\n                    <div className=\"col-md-4 text-center\">\r\n                        <img\r\n                            src={doctor.profileImageBase64}\r\n                            alt={doctor.fullName}\r\n                            className=\"img-fluid rounded-circle shadow-sm mb-3\"\r\n                            style={{ width: '150px', height: '150px', objectFit: 'cover', border: '3px solid #dc3545' }}\r\n                        />\r\n                        <h3 className=\"mb-1\">{doctor.fullName}</h3>\r\n                        <p className=\"text-muted\">{doctor.specijalizacije}</p>\r\n                        <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <span className=\"text-warning me-1\">★</span>\r\n                            <span className=\"fw-bold\">{doctor.ocjena ? doctor.ocjena.toFixed(1) : 'N/A'}</span> {/* Formatiraj ocjenu na jednu decimalu */}\r\n                            <span className=\"text-muted ms-2\">({doctor.grad})</span>\r\n                            {/* Dugme za osvježavanje ocjene, sada će ono okidati i dohvaćanje termina */}\r\n                            <button\r\n                                className=\"btn btn-outline-secondary btn-sm ms-3\"\r\n                                onClick={fetchDoctorDetails} // Pozovi funkciju za dohvaćanje detalja doktora (koja okida i dohvat termina)\r\n                                disabled={loading} // Onemogući dugme dok se učitava\r\n                            >\r\n                                {loading ? 'Osvježavanje...' : 'Osvježi profil'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <h4 className=\"text-danger mb-3\">Informacije o doktoru</h4>\r\n                        <p><strong>Email:</strong> {doctor.email}</p>\r\n                        <p><strong>Telefon:</strong> {doctor.telefon}</p>\r\n                        <p><strong>Grad:</strong> {doctor.grad}</p>\r\n                        <p><strong>Radno vrijeme:</strong> {doctor.radnoVrijeme}</p>\r\n                        <p><strong>Godine iskustva:</strong> {doctor.iskustvo}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"card shadow-lg p-4\">\r\n                <h4 className=\"text-danger mb-3\">Zakažite pregled</h4>\r\n                {bookingMessage && (\r\n                    <div className={`alert alert-${bookingMessageType} mb-3`} role=\"alert\">\r\n                        {bookingMessage}\r\n                    </div>\r\n                )}\r\n                {renderBookingSection()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DoctorProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}