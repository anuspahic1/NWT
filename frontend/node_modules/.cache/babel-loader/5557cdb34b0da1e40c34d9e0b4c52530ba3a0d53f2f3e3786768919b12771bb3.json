{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRoles, setUserRoles] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [fullName, setFullName] = useState(null);\n  const [token, setToken] = useState(null);\n  // User objekat koji sadrži sve relevantne ID-eve i podatke\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log(\"AuthContext useEffect: checking localStorage for token...\");\n    const storedToken = localStorage.getItem('jwtToken');\n    const storedRoles = localStorage.getItem('userRoles');\n    const storedEmail = localStorage.getItem('userEmail');\n    const storedFullName = localStorage.getItem('fullName');\n    const storedDoktorId = localStorage.getItem('doktorId'); // Dohvati doktorId iz localStorage\n    const storedPacijentId = localStorage.getItem('pacijentId'); // Dohvati pacijentId iz localStorage\n\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        if (decodedToken.exp * 1000 < Date.now()) {\n          console.warn(\"AuthContext: JWT token je istekao. Odjavljujem korisnika.\");\n          logoutUser();\n        } else {\n          setToken(storedToken);\n          setIsAuthenticated(true);\n          try {\n            setUserRoles(JSON.parse(storedRoles));\n          } catch (e) {\n            console.error(\"AuthContext: Greška prilikom parsiranja userRoles iz localStorage-a\", e);\n            setUserRoles([]);\n          }\n          setUserEmail(storedEmail);\n          setFullName(storedFullName);\n\n          // Kreiramo user objekat prilikom učitavanja iz localStorage-a\n          const userObj = {\n            id: decodedToken.sub || null,\n            // 'sub' je često ID korisnika u JWT-u\n            email: storedEmail,\n            fullName: storedFullName,\n            // Parsiraj ID-eve kao brojeve (Integer na backendu = Number na frontendu)\n            doktorId: storedDoktorId ? parseInt(storedDoktorId, 10) : null,\n            pacijentId: storedPacijentId ? parseInt(storedPacijentId, 10) : null\n          };\n          setUser(userObj);\n          console.log(\"AuthContext: User data loaded from localStorage:\", userObj);\n        }\n      } catch (error) {\n        console.error(\"AuthContext: Greška prilikom dekodiranja JWT tokena ili učitavanja iz localStorage-a:\", error);\n        logoutUser();\n      }\n    } else {\n      console.log(\"AuthContext: No token found in localStorage.\");\n    }\n    setLoading(false);\n    console.log(\"AuthContext useEffect: loading set to false.\");\n  }, []); // Pazi da je dependency array prazan []\n\n  const login = (jwtToken, roles, email, name, doktorID, pacijentID) => {\n    console.log(\"AuthContext Login function called with doktorID:\", doktorID, \"pacijentID:\", pacijentID);\n    localStorage.setItem('jwtToken', jwtToken);\n    localStorage.setItem('userRoles', JSON.stringify(roles));\n    localStorage.setItem('userEmail', email);\n    localStorage.setItem('fullName', name);\n\n    // Spremi ID-eve u localStorage\n    if (doktorID !== null && doktorID !== undefined) {\n      localStorage.setItem('doktorId', doktorID.toString()); // Spremi kao string\n    } else {\n      localStorage.removeItem('doktorId');\n    }\n    if (pacijentID !== null && pacijentID !== undefined) {\n      localStorage.setItem('pacijentId', pacijentID.toString()); // Spremi kao string\n    } else {\n      localStorage.removeItem('pacijentId');\n    }\n    setToken(jwtToken);\n    setIsAuthenticated(true);\n    setUserRoles(roles);\n    setUserEmail(email);\n    setFullName(name);\n\n    // Kreiramo user objekat za React stanje\n    const userObj = {\n      id: jwtDecode(jwtToken).sub || null,\n      // Koristi 'sub' iz JWT-a kao generički user ID\n      email: email,\n      fullName: name,\n      doktorId: doktorID,\n      // Ovdje je već Number\n      pacijentId: pacijentID // Ovdje je već Number\n    };\n    setUser(userObj);\n    console.log(\"AuthContext: User state set after login:\", userObj);\n  };\n  const logout = () => {\n    console.log(\"AuthContext: Logout called.\");\n    logoutUser();\n  };\n  const logoutUser = () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userRoles');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('fullName');\n    localStorage.removeItem('doktorId');\n    localStorage.removeItem('pacijentId');\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserRoles([]);\n    setUserEmail(null);\n    setFullName(null);\n    setUser(null); // Reset user state\n    console.log(\"AuthContext: User logged out and state cleared.\");\n  };\n  const hasRole = role => {\n    return userRoles.includes(role);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRoles,\n      userEmail,\n      fullName,\n      token,\n      user,\n      login,\n      logout,\n      hasRole,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JozwJDf5auA2TLEMXI9K9tmK5+U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRoles","setUserRoles","userEmail","setUserEmail","fullName","setFullName","token","setToken","user","setUser","loading","setLoading","console","log","storedToken","localStorage","getItem","storedRoles","storedEmail","storedFullName","storedDoktorId","storedPacijentId","decodedToken","exp","Date","now","warn","logoutUser","JSON","parse","e","error","userObj","id","sub","email","doktorId","parseInt","pacijentId","login","jwtToken","roles","name","doktorID","pacijentID","setItem","stringify","undefined","toString","removeItem","logout","hasRole","role","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRoles, setUserRoles] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [fullName, setFullName] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  // User objekat koji sadrži sve relevantne ID-eve i podatke\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log(\"AuthContext useEffect: checking localStorage for token...\");\r\n    const storedToken = localStorage.getItem('jwtToken');\r\n    const storedRoles = localStorage.getItem('userRoles');\r\n    const storedEmail = localStorage.getItem('userEmail');\r\n    const storedFullName = localStorage.getItem('fullName');\r\n    const storedDoktorId = localStorage.getItem('doktorId'); // Dohvati doktorId iz localStorage\r\n    const storedPacijentId = localStorage.getItem('pacijentId'); // Dohvati pacijentId iz localStorage\r\n\r\n    if (storedToken) {\r\n      try {\r\n        const decodedToken = jwtDecode(storedToken);\r\n        if (decodedToken.exp * 1000 < Date.now()) {\r\n          console.warn(\"AuthContext: JWT token je istekao. Odjavljujem korisnika.\");\r\n          logoutUser();\r\n        } else {\r\n          setToken(storedToken);\r\n          setIsAuthenticated(true);\r\n          try {\r\n            setUserRoles(JSON.parse(storedRoles));\r\n          } catch (e) {\r\n            console.error(\"AuthContext: Greška prilikom parsiranja userRoles iz localStorage-a\", e);\r\n            setUserRoles([]);\r\n          }\r\n          setUserEmail(storedEmail);\r\n          setFullName(storedFullName);\r\n\r\n          // Kreiramo user objekat prilikom učitavanja iz localStorage-a\r\n          const userObj = {\r\n            id: decodedToken.sub || null, // 'sub' je često ID korisnika u JWT-u\r\n            email: storedEmail,\r\n            fullName: storedFullName,\r\n            // Parsiraj ID-eve kao brojeve (Integer na backendu = Number na frontendu)\r\n            doktorId: storedDoktorId ? parseInt(storedDoktorId, 10) : null,\r\n            pacijentId: storedPacijentId ? parseInt(storedPacijentId, 10) : null,\r\n          };\r\n          setUser(userObj);\r\n          console.log(\"AuthContext: User data loaded from localStorage:\", userObj);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"AuthContext: Greška prilikom dekodiranja JWT tokena ili učitavanja iz localStorage-a:\", error);\r\n        logoutUser();\r\n      }\r\n    } else {\r\n      console.log(\"AuthContext: No token found in localStorage.\");\r\n    }\r\n    setLoading(false);\r\n    console.log(\"AuthContext useEffect: loading set to false.\");\r\n  }, []); // Pazi da je dependency array prazan []\r\n\r\n  const login = (jwtToken, roles, email, name, doktorID, pacijentID) => {\r\n    console.log(\"AuthContext Login function called with doktorID:\", doktorID, \"pacijentID:\", pacijentID);\r\n    localStorage.setItem('jwtToken', jwtToken);\r\n    localStorage.setItem('userRoles', JSON.stringify(roles));\r\n    localStorage.setItem('userEmail', email);\r\n    localStorage.setItem('fullName', name);\r\n\r\n    // Spremi ID-eve u localStorage\r\n    if (doktorID !== null && doktorID !== undefined) {\r\n      localStorage.setItem('doktorId', doktorID.toString()); // Spremi kao string\r\n    } else {\r\n      localStorage.removeItem('doktorId');\r\n    }\r\n    if (pacijentID !== null && pacijentID !== undefined) {\r\n      localStorage.setItem('pacijentId', pacijentID.toString()); // Spremi kao string\r\n    } else {\r\n      localStorage.removeItem('pacijentId');\r\n    }\r\n\r\n    setToken(jwtToken);\r\n    setIsAuthenticated(true);\r\n    setUserRoles(roles);\r\n    setUserEmail(email);\r\n    setFullName(name);\r\n\r\n    // Kreiramo user objekat za React stanje\r\n    const userObj = {\r\n      id: jwtDecode(jwtToken).sub || null, // Koristi 'sub' iz JWT-a kao generički user ID\r\n      email: email,\r\n      fullName: name,\r\n      doktorId: doktorID, // Ovdje je već Number\r\n      pacijentId: pacijentID, // Ovdje je već Number\r\n    };\r\n    setUser(userObj);\r\n    console.log(\"AuthContext: User state set after login:\", userObj);\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log(\"AuthContext: Logout called.\");\r\n    logoutUser();\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userRoles');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('fullName');\r\n    localStorage.removeItem('doktorId');\r\n    localStorage.removeItem('pacijentId');\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUserRoles([]);\r\n    setUserEmail(null);\r\n    setFullName(null);\r\n    setUser(null); // Reset user state\r\n    console.log(\"AuthContext: User logged out and state cleared.\");\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return userRoles.includes(role);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRoles, userEmail, fullName, token, user, login, logout, hasRole, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}