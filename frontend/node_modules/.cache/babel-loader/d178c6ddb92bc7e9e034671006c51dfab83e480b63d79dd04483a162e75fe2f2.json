{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\pages\\\\AdminDashboard.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useAuth } from '../contexts/AuthContext';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GATEWAY_BASE_URL = 'http://localhost:8081';\n\n// Ovi prefiksi sada sadrže gateway URL i context-path servisa.\n// Pretpostavljamo da backend servisi interno imaju /api/ prefiks za svoje kontrolere.\nconst KORISNICI_DOKTORI_API_PREFIX = `${GATEWAY_BASE_URL}/api/korisnici-doktori`;\nconst TERMINI_PREGLEDI_API_PREFIX = `${GATEWAY_BASE_URL}/api/termini-pregledi`;\nconst AUTH_API_PREFIX = `${GATEWAY_BASE_URL}/auth`;\nfunction AdminDashboard() {\n  _s2();\n  var _s = $RefreshSig$();\n  const {\n    token\n  } = useAuth();\n\n  // Korištenje useMemo za memoizaciju authHeaders.\n  // Objekt će se rekreirati samo kada se 'token' promijeni,\n  // što sprečava nepotrebne re-rendere djece koja ovise o njemu.\n  const authHeaders = useMemo(() => ({\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  }), [token]); // Ovisi samo o tokenu\n\n  // Stanje za praćenje početnog učitavanja panela i autentifikacije\n  const [loadingInitial, setLoadingInitial] = useState(true);\n  const [isAuthChecked, setIsAuthChecked] = useState(false);\n\n  // Aktivni tab, sa čuvanjem u lokalnom skladištu\n  const [activeTab, setActiveTab] = useState(() => {\n    const savedTab = localStorage.getItem('adminActiveTab');\n    return savedTab || 'overview';\n  });\n\n  // Stanja za podatke iz API-ja\n  const [doctors, setDoctors] = useState([]);\n  const [patients, setPatients] = useState([]);\n  const [examinations, setExaminations] = useState([]); // Promijenjeno iz appointments u examinations\n  const [terms, setTerms] = useState([]); // Novo stanje za termine\n\n  // Stanja za modale i forme\n  const [showDoctorModal, setShowDoctorModal] = useState(false);\n  const [editingDoctor, setEditingDoctor] = useState(null); // Čuva podatke doktora za uređivanje\n  const [showPatientModal, setShowPatientModal] = useState(false);\n  const [editingPatient, setEditingPatient] = useState(null);\n  const [showTermModal, setShowTermModal] = useState(false); // Novo stanje za modal termina\n  const [editingTerm, setEditingTerm] = useState(null); // Novo stanje za uređivanje termina\n  const [showExaminationModal, setShowExaminationModal] = useState(false); // Novo stanje za modal pregleda\n  const [editingExamination, setEditingExamination] = useState(null); // Novo stanje za uređivanje pregleda\n\n  // Stanja za notifikacije (Alert)\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [alertType, setAlertType] = useState('success');\n\n  // Stanja za pretragu\n  const [doctorSearchTerm, setDoctorSearchTerm] = useState('');\n  const [patientSearchTerm, setPatientSearchTerm] = useState('');\n  const [termSearchTerm, setTermSearchTerm] = useState(''); // Novo za pretragu termina\n  const [examinationSearchTerm, setExaminationSearchTerm] = useState(''); // Novo za pretragu pregleda\n\n  // Stanja za paginaciju\n  const [doctorsCurrentPage, setDoctorsCurrentPage] = useState(1);\n  const [patientsCurrentPage, setPatientsCurrentPage] = useState(1);\n  const [termsCurrentPage, setTermsCurrentPage] = useState(1); // Novo za paginaciju termina\n  const [examinationsCurrentPage, setExaminationsCurrentPage] = useState(1); // Promijenjeno iz appointmentsCurrentPage\n  const itemsPerPage = 5; // Broj stavki po stranici\n\n  // Funkcija za prikaz notifikacija\n  const showNotification = (message, type = 'success') => {\n    setAlertMessage(message);\n    setAlertType(type);\n    setShowAlert(true);\n    setTimeout(() => {\n      setShowAlert(false);\n      setAlertMessage('');\n    }, 3000); // Notifikacija nestaje nakon 3 sekunde\n  };\n\n  // Funkcije za dohvat podataka sa backend-a\n  const fetchDoctors = async () => {\n    try {\n      const response = await axios.get(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori`, authHeaders);\n      const transformedDoctors = response.data.map(doc => ({\n        id: doc.doktorID,\n        userId: doc.userId,\n        name: `${doc.ime} ${doc.prezime}`,\n        ime: doc.ime,\n        prezime: doc.prezime,\n        specialty: Array.isArray(doc.specijalizacije) && doc.specijalizacije.length > 0 ? doc.specijalizacije.join(', ') : 'N/A',\n        specijalizacije: doc.specijalizacije,\n        city: doc.grad || 'N/A',\n        grad: doc.grad,\n        email: doc.email || 'N/A',\n        telefon: doc.telefon || 'N/A',\n        radnoVrijeme: doc.radnoVrijeme || '',\n        // Prazan string umjesto 'N/A' za bolji prikaz\n        iskustvo: doc.iskustvo !== null && doc.iskustvo !== undefined ? doc.iskustvo : '',\n        // Prazan string umjesto 'N/A'\n        ocjena: doc.ocjena !== null && doc.ocjena !== undefined ? doc.ocjena : 0.0 // Ocjena 0.0 umjesto 'N/A'\n      }));\n      setDoctors(transformedDoctors);\n    } catch (error) {\n      var _error$response;\n      console.error(\"Greška prilikom dohvaćanja doktora:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      showNotification(\"Greška prilikom dohvaćanja doktora sa servera.\", \"danger\");\n    }\n  };\n  const fetchPatients = async () => {\n    try {\n      const response = await axios.get(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti`, authHeaders);\n      const transformedPatients = response.data.map(pat => ({\n        id: pat.pacijentID,\n        userId: pat.userId,\n        name: `${pat.ime} ${pat.prezime}`,\n        ime: pat.ime,\n        prezime: pat.prezime,\n        email: pat.email || 'N/A',\n        phone: pat.telefon || 'N/A',\n        telefon: pat.telefon\n      }));\n      setPatients(transformedPatients);\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Greška prilikom dohvaćanja pacijenata:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      showNotification(\"Greška prilikom dohvaćanja pacijenata sa servera.\", \"danger\");\n    }\n  };\n\n  // Nova funkcija za dohvaćanje termina\n  const fetchTerms = async () => {\n    try {\n      const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini`, authHeaders);\n      const transformedTerms = response.data.map(term => ({\n        id: term.terminID,\n        doktorID: term.doktorID,\n        datum: term.datum,\n        vrijeme: term.vrijeme,\n        dostupnost: term.dostupnost // Keep as boolean for the checkbox\n      }));\n      setTerms(transformedTerms);\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Greška prilikom dohvaćanja termina:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      showNotification(\"Greška prilikom dohvaćanja termina sa servera.\", \"danger\");\n    }\n  };\n\n  // Funkcija za dohvaćanje pregleda (prethodno appointments)\n  const fetchExaminations = async () => {\n    try {\n      const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, authHeaders);\n      const transformedExaminations = response.data.map(app => ({\n        id: app.pregledID,\n        pacijentID: app.pacijentID,\n        doktorID: app.doktorID,\n        patientName: app.pacijentIme || 'N/A',\n        doctorName: app.doktorIme || 'N/A',\n        datumPregleda: app.datumPregleda,\n        // PROMIJENJENO: Ime ključa usklađeno sa backendom\n        vrijemePregleda: app.vrijemePregleda,\n        // PROMIJENJENO: Ime ključa usklađeno sa backendom\n        status: app.status,\n        komentarPacijenta: app.komentarPacijenta || '',\n        ocjenaDoktora: app.ocjenaDoktora || null,\n        terminID: app.termin ? app.termin.terminID : 'N/A'\n      }));\n      setExaminations(transformedExaminations);\n    } catch (error) {\n      var _error$response4;\n      console.error(\"Greška prilikom dohvaćanja pregleda:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      showNotification(\"Greška prilikom dohvaćanja pregleda sa servera.\", \"danger\");\n    }\n  };\n\n  // Glavni useEffect hook za provjeru autentifikacije i dohvat podataka\n  useEffect(() => {\n    if (token !== undefined && !isAuthChecked) {\n      setIsAuthChecked(true);\n    }\n    const initializeDashboard = async () => {\n      if (isAuthChecked) {\n        if (token) {\n          try {\n            await Promise.all([fetchDoctors(), fetchPatients(), fetchTerms(),\n            // Dohvati termine\n            fetchExaminations() // Dohvati preglede\n            ]);\n          } catch (error) {\n            console.error(\"Greška prilikom inicijalnog dohvaćanja podataka:\", error);\n            showNotification(\"Greška prilikom učitavanja početnih podataka.\", \"danger\");\n          } finally {\n            setLoadingInitial(false);\n          }\n        } else {\n          setLoadingInitial(false);\n          console.warn(\"Provjera autentifikacije završena, ali token nije dostupan. Korisnik nije ulogovan/autorizovan.\");\n        }\n      }\n    };\n    initializeDashboard();\n  }, [token, isAuthChecked]);\n  useEffect(() => {\n    localStorage.setItem('adminActiveTab', activeTab);\n  }, [activeTab]);\n\n  // Funkcija za dodavanje novog doktora\n  const handleAddDoctor = async newDoctorData => {\n    try {\n      var _authResponse$data$us;\n      // 1. Registracija korisnika u Auth servisu sa osnovnim podacima\n      const registerPayload = {\n        email: newDoctorData.email,\n        password: newDoctorData.password,\n        fullName: `${newDoctorData.ime} ${newDoctorData.prezime}`,\n        telefon: newDoctorData.telefon,\n        roles: [\"ROLE_DOKTOR\"],\n        grad: newDoctorData.grad,\n        specijalizacije: newDoctorData.specijalizacije\n      };\n      const authResponse = await axios.post(`${AUTH_API_PREFIX}/register`, registerPayload);\n      // OBAVEZNO: Logirajte cijeli authResponse.data da vidite što se vraća!\n      console.log(\"Auth Service Register Response Data:\", authResponse.data);\n\n      // Promijenite ovu liniju na osnovu stvarne strukture odgovora Auth servisa\n      // Najvjerojatnije:\n      // const userId = authResponse.data.id;\n      // Ako je npr. { user: { id: \"some-uuid\" } }\n      const userId = authResponse.data.id || ((_authResponse$data$us = authResponse.data.user) === null || _authResponse$data$us === void 0 ? void 0 : _authResponse$data$us.id) || null;\n      if (!userId) {\n        throw new Error(\"Korisnički ID nije dobiven iz Auth servisa.\");\n      }\n\n      // 2. Slanje kompletnih detalja doktora servisu korisnici-doktori\n      const doctorDetailsPayload = {\n        userId: userId,\n        // Povezivanje sa korisničkim nalogom\n        ime: newDoctorData.ime,\n        prezime: newDoctorData.prezime,\n        email: newDoctorData.email,\n        telefon: newDoctorData.telefon,\n        grad: newDoctorData.grad,\n        specijalizacije: newDoctorData.specijalizacije,\n        radnoVrijeme: newDoctorData.radnoVrijeme || '',\n        // Default na prazan string\n        iskustvo: newDoctorData.iskustvo !== null && newDoctorData.iskustvo !== undefined ? newDoctorData.iskustvo : 0,\n        // Default na 0\n        ocjena: 0.0 // Admin ne postavlja ocjenu, uvijek počinje s 0.0\n      };\n\n      // Poziv na korisnici-doktori servis za spašavanje detalja\n      await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/user-details/${userId}`, doctorDetailsPayload, authHeaders); // Ispravan endpoint\n\n      // Dodatno kašnjenje prije dohvaćanja da se osigura da je backend obradio event\n      setTimeout(() => {\n        fetchDoctors(); // Ponovo dohvati doktore da bi se prikazale promjene\n      }, 500);\n      setShowDoctorModal(false);\n      showNotification('Novi doktor uspješno registrovan i detalji sačuvani!', 'success');\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data;\n      console.error(\"Greška prilikom dodavanja doktora:\", ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      showNotification(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Greška prilikom dodavanja doktora.', \"danger\");\n    }\n  };\n\n  // Funkcija za ažuriranje postojećeg doktora\n  const handleUpdateDoctor = async updatedDoctor => {\n    try {\n      // Provjerite da li ID doktora postoji\n      if (!updatedDoctor.id) {\n        showNotification('ID doktora nedostaje za ažuriranje.', 'danger');\n        console.error('ID doktora nedostaje za ažuriranje:', updatedDoctor);\n        return;\n      }\n\n      // Podaci za ažuriranje doktora u korisnici-doktori servisu\n      const doctorUpdatePayload = {\n        ime: updatedDoctor.ime,\n        prezime: updatedDoctor.prezime,\n        email: updatedDoctor.email,\n        telefon: updatedDoctor.telefon,\n        grad: updatedDoctor.grad,\n        specijalizacije: updatedDoctor.specijalizacije,\n        radnoVrijeme: updatedDoctor.radnoVrijeme || '',\n        // Default na prazan string\n        iskustvo: updatedDoctor.iskustvo !== null && updatedDoctor.iskustvo !== undefined ? updatedDoctor.iskustvo : 0,\n        // Default na 0\n        ocjena: updatedDoctor.ocjena || 0.0 // Ostavljamo postojeću ocjenu, ali osiguravamo default ako je null\n      };\n      // Ažuriranje detalja doktora u korisnici-doktori servisu (koristimo doktorID)\n      await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${updatedDoctor.id}`, doctorUpdatePayload, authHeaders);\n\n      // Podaci za ažuriranje korisničkog naloga u Auth servisu\n      const userUpdatePayload = {\n        email: updatedDoctor.email,\n        fullName: `${updatedDoctor.ime} ${updatedDoctor.prezime}`,\n        telefon: updatedDoctor.telefon\n      };\n      // Ažuriraj korisnički nalog u Auth servisu ako postoji userId\n      if (updatedDoctor.userId) {\n        await axios.put(`${AUTH_API_PREFIX}/users/${updatedDoctor.userId}`, userUpdatePayload, authHeaders);\n      } else {\n        console.warn(\"Nije pronađen userId za ažuriranje korisnika u Auth servisu.\");\n      }\n      fetchDoctors(); // Ponovo dohvati doktore nakon ažuriranja\n      setShowDoctorModal(false);\n      setEditingDoctor(null);\n      showNotification('Doktor uspješno ažuriran!', 'success');\n    } catch (error) {\n      var _error$response7, _error$response8, _error$response8$data;\n      console.error(\"Greška prilikom ažuriranja doktora:\", ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message);\n      showNotification(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Greška prilikom ažuriranja doktora.', \"danger\");\n    }\n  };\n\n  // CUSTOM CONFIRMATION MODAL STATE AND FUNCTIONS\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [confirmAction, setConfirmAction] = useState(() => () => {}); // Pohranjuje funkciju koja se poziva pri potvrdi\n  const [confirmMessage, setConfirmMessage] = useState(\"\");\n  const [confirmTitle, setConfirmTitle] = useState(\"Potvrda\");\n\n  // Funkcija za prikaz prilagođenog modala za potvrdu\n  const showCustomConfirm = (message, action, title = \"Potvrda\") => {\n    setConfirmMessage(message);\n    setConfirmAction(() => action); // Koristi funkcionalno ažuriranje za pohranu akcije\n    setConfirmTitle(title);\n    setShowConfirmModal(true);\n  };\n\n  // Funkcija koja se poziva kada korisnik potvrdi akciju u modalu\n  const handleConfirmAction = () => {\n    confirmAction(); // Izvrši pohranjenu akciju\n    setShowConfirmModal(false);\n  };\n\n  // Funkcija za brisanje doktora (koristi custom confirm)\n  const handleDeleteDoctor = async id => {\n    showCustomConfirm('Jeste li sigurni da želite obrisati ovog doktora? Ovom akcijom će se obrisati i korisnički nalog.', async () => {\n      try {\n        const doctorToDelete = doctors.find(doc => doc.id === id);\n        if (!doctorToDelete || !doctorToDelete.userId) {\n          showNotification('Nije pronađen korisnički ID za brisanje doktora.', 'danger');\n          return;\n        }\n\n        // Brisanje doktora iz korisnici-doktori servisa\n        await axios.delete(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${id}`, authHeaders);\n        // Brisanje korisnika iz Auth servisa\n        await axios.delete(`${AUTH_API_PREFIX}/users/${doctorToDelete.userId}`, authHeaders);\n        fetchDoctors(); // Ponovo dohvati doktore nakon brisanja\n        showNotification('Doktor uspješno obrisan!', 'danger');\n      } catch (error) {\n        var _error$response9, _error$response0, _error$response0$data;\n        console.error(\"Greška prilikom brisanja doktora:\", ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n        showNotification(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Greška prilikom brisanja doktora.', \"danger\");\n      }\n    }, \"Potvrdi brisanje doktora\");\n  };\n\n  // Otvaranje modala za doktora (dodavanje/uređivanje)\n  const openDoctorModal = (doctor = null) => {\n    setEditingDoctor(doctor);\n    setShowDoctorModal(true);\n  };\n\n  // Filtriranje i paginacija doktora\n  const filteredDoctors = doctors.filter(doctor => doctor.name.toLowerCase().includes(doctorSearchTerm.toLowerCase()) || doctor.specialty.toLowerCase().includes(doctorSearchTerm.toLowerCase()) || doctor.city.toLowerCase().includes(doctorSearchTerm.toLowerCase()) || doctor.email && doctor.email.toLowerCase().includes(doctorSearchTerm.toLowerCase()) || doctor.telefon && doctor.telefon.toLowerCase().includes(doctorSearchTerm.toLowerCase()) || doctor.radnoVrijeme && doctor.radnoVrijeme.toLowerCase().includes(doctorSearchTerm.toLowerCase()));\n  const indexOfLastDoctor = doctorsCurrentPage * itemsPerPage;\n  const indexOfFirstDoctor = indexOfLastDoctor - itemsPerPage;\n  const currentDoctors = filteredDoctors.slice(indexOfFirstDoctor, indexOfLastDoctor);\n  const totalDoctorPages = Math.ceil(filteredDoctors.length / itemsPerPage);\n\n  // Funkcija za dodavanje novog pacijenta\n  const handleAddPatient = async newPatient => {\n    try {\n      var _authResponse$data$us2;\n      console.log(\"handleAddPatient: Počinjem proces dodavanja pacijenta.\");\n      // 1. Registracija korisnika u Auth servisu\n      const registerPayload = {\n        email: newPatient.email,\n        password: newPatient.password,\n        // Password se šalje ovdje\n        fullName: `${newPatient.ime} ${newPatient.prezime}`,\n        telefon: newPatient.telefon,\n        roles: [\"ROLE_PACIJENT\"],\n        // Uvijek ROLE_PACIJENT za pacijenta\n        grad: null,\n        // Pacijentima grad nije obavezan\n        specijalizacije: null // Pacijenti nemaju specijalizacije\n      };\n      console.log(\"handleAddPatient: Slanje registerPayload-a Auth servisu:\", registerPayload);\n      const authResponse = await axios.post(`${AUTH_API_PREFIX}/register`, registerPayload);\n\n      // OBAVEZNO: Logirajte cijeli authResponse.data da vidite što se vraća!\n      console.log(\"Auth Service Register Response Data (for patient):\", authResponse.data);\n      const userId = authResponse.data.id || ((_authResponse$data$us2 = authResponse.data.user) === null || _authResponse$data$us2 === void 0 ? void 0 : _authResponse$data$us2.id) || null;\n      if (!userId) {\n        throw new Error(\"Korisnički ID nije dobiven iz Auth servisa za pacijenta.\");\n      }\n\n      // KLJUČNA PROMJENA: Uklonjen redundantni axios.post poziv na korisnici-doktori servis.\n      // Očekujemo da UserRegisteredEvent, poslan od Auth servisa, kreira Pacijent entitet.\n      console.log(\"handleAddPatient: Preskačem slanje pacijent detalja na korisnici-doktori servis. Očekujem da UserRegisteredEvent to obradi.\");\n\n      // Zbog asinhronosti eventa, možda će biti minimalnog kašnjenja prije nego što se pacijent pojavi u tabeli.\n      // Bolje je osvježiti listu pacijenata nakon kratke pauze ili uzeti u obzir da je event uspješan.\n      // Za sada, samo osvježavamo odmah.\n      setTimeout(() => {\n        fetchPatients(); // Ponovo dohvati pacijente nakon dodavanja\n      }, 500); // Kratka pauza od 500ms\n\n      setShowPatientModal(false);\n      showNotification('Novi pacijent uspješno registrovan!', 'success');\n      console.log(\"handleAddPatient: Proces dodavanja pacijenta uspješno završen (registracija i event obrada).\");\n    } catch (error) {\n      var _error$response1, _error$response10, _error$response10$dat;\n      console.error(\"Greška prilikom dodavanja pacijenta:\", ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message);\n      // Prikazati poruku o grešci\n      showNotification(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.message) || 'Greška prilikom dodavanja pacijenta. Molimo provjerite konzolu za više detalja.', \"danger\");\n    }\n  };\n\n  // Funkcija za ažuriranje postojećeg pacijenta (postojeća)\n  const handleUpdatePatient = async updatedPatient => {\n    try {\n      const patientUpdatePayload = {\n        ime: updatedPatient.ime,\n        prezime: updatedPatient.prezime,\n        email: updatedPatient.email,\n        telefon: updatedPatient.telefon\n      };\n      await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti/${updatedPatient.id}`, patientUpdatePayload, authHeaders);\n      const userUpdatePayload = {\n        email: updatedPatient.email,\n        fullName: `${updatedPatient.ime} ${updatedPatient.prezime}`,\n        telefon: updatedPatient.telefon\n      };\n      if (updatedPatient.userId) {\n        await axios.put(`${AUTH_API_PREFIX}/users/${updatedPatient.userId}`, userUpdatePayload, authHeaders);\n      } else {\n        console.warn(\"Nije pronađen userId za ažuriranje korisnika u Auth servisu.\");\n      }\n      fetchPatients();\n      setShowPatientModal(false);\n      setEditingPatient(null);\n      showNotification('Pacijent uspješno ažuriran!', 'success');\n    } catch (error) {\n      var _error$response11, _error$response12, _error$response12$dat;\n      console.error(\"Greška prilikom ažuriranja pacijenta:\", ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message);\n      showNotification(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || 'Greška prilikom ažuriranja pacijenta. Molimo provjerite konzolu za više detalja.', \"danger\");\n    }\n  };\n\n  // Funkcija za brisanje pacijenta (postojeća)\n  const handleDeletePatient = async id => {\n    showCustomConfirm('Jeste li sigurni da želite obrisati ovog pacijenta? Ovom akcijom će se obrisati i korisnički nalog.', async () => {\n      try {\n        const patientToDelete = patients.find(pat => pat.id === id);\n        if (!patientToDelete || !patientToDelete.userId) {\n          showNotification('Nije pronađen korisnički ID za brisanje pacijenta.', 'danger');\n          return;\n        }\n        await axios.delete(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti/${id}`, authHeaders);\n        await axios.delete(`${AUTH_API_PREFIX}/users/${patientToDelete.userId}`, authHeaders);\n        fetchPatients();\n        showNotification('Pacijent uspješno obrisan!', 'success');\n      } catch (error) {\n        var _error$response13, _error$response14, _error$response14$dat;\n        console.error(\"Greška prilikom brisanja pacijenta:\", ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || error.message);\n        showNotification(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || 'Greška prilikom brisanja pacijenta.', \"danger\");\n      }\n    }, \"Potvrdi brisanje pacijenta\");\n  };\n\n  // Otvaranje modala za pacijenta\n  const openPatientModal = (patient = null) => {\n    setEditingPatient(patient);\n    setShowPatientModal(true);\n  };\n\n  // Filtriranje i paginacija pacijenata\n  const filteredPatients = patients.filter(patient => patient.name.toLowerCase().includes(patientSearchTerm.toLowerCase()) || patient.email.toLowerCase().includes(patientSearchTerm.toLowerCase()) || patient.phone && patient.phone.toLowerCase().includes(patientSearchTerm.toLowerCase()));\n  const indexOfLastPatient = patientsCurrentPage * itemsPerPage;\n  const indexOfFirstPatient = indexOfLastPatient - itemsPerPage;\n  const currentPatients = filteredPatients.slice(indexOfFirstPatient, indexOfLastPatient);\n  const totalPatientPages = Math.ceil(filteredPatients.length / itemsPerPage);\n\n  // --- Funkcije za Termine ---\n  const handleAddTerm = async newTermData => {\n    try {\n      const response = await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini`, newTermData, authHeaders);\n      showNotification('Novi termin uspješno dodan!', 'success');\n      fetchTerms();\n      setShowTermModal(false);\n    } catch (error) {\n      var _error$response15, _error$response16, _error$response16$dat;\n      console.error(\"Greška prilikom dodavanja termina:\", ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || error.message);\n      showNotification(((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.message) || 'Greška prilikom dodavanja termina.', \"danger\");\n    }\n  };\n  const handleUpdateTerm = async updatedTerm => {\n    try {\n      // Datum i vrijeme trebaju biti stringovi u formatu YAPILANDI-MM-DD i HH:MM:SS\n      const termPayload = {\n        doktorID: updatedTerm.doktorID,\n        datum: updatedTerm.datum,\n        vrijeme: updatedTerm.vrijeme,\n        dostupnost: updatedTerm.dostupnost\n      };\n      await axios.put(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${updatedTerm.id}`, termPayload, authHeaders);\n      showNotification('Termin uspješno ažuriran!', 'success');\n      fetchTerms();\n      setShowTermModal(false);\n      setEditingTerm(null);\n    } catch (error) {\n      var _error$response17, _error$response18, _error$response18$dat;\n      console.error(\"Greška prilikom ažuriranja termina:\", ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || error.message);\n      showNotification(((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : (_error$response18$dat = _error$response18.data) === null || _error$response18$dat === void 0 ? void 0 : _error$response18$dat.message) || 'Greška prilikom ažuriranja termina.', \"danger\");\n    }\n  };\n  const handleDeleteTerm = async id => {\n    showCustomConfirm('Jeste li sigurni da želite obrisati ovaj termin?', async () => {\n      try {\n        await axios.delete(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${id}`, authHeaders);\n        showNotification('Termin uspješno obrisan!', 'success');\n        fetchTerms();\n      } catch (error) {\n        var _error$response19, _error$response20, _error$response20$dat;\n        console.error(\"Greška prilikom brisanja termina:\", ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || error.message);\n        showNotification(((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : (_error$response20$dat = _error$response20.data) === null || _error$response20$dat === void 0 ? void 0 : _error$response20$dat.message) || 'Greška prilikom brisanja termina.', \"danger\");\n      }\n    }, \"Potvrdi brisanje termina\");\n  };\n  const openTermModal = (term = null) => {\n    // Ako uređujemo postojeći termin, želimo poslati boolean za dostupnost u modal\n    if (term) {\n      setEditingTerm({\n        ...term,\n        doktorID: term.doktorID,\n        dostupnost: term.dostupnost\n      });\n    } else {\n      setEditingTerm(null); // Za novi termin, inicijaliziraj na null\n    }\n    setShowTermModal(true);\n  };\n\n  // Filtriranje i paginacija termina\n  const filteredTerms = terms.filter(term => term.doktorID != null && term.doktorID.toString().toLowerCase().includes(termSearchTerm.toLowerCase()) || term.datum && term.datum.toLowerCase().includes(termSearchTerm.toLowerCase()) || term.vrijeme && term.vrijeme.toLowerCase().includes(termSearchTerm.toLowerCase()) || term.dostupnost !== undefined && (term.dostupnost ? 'dostupan' : 'zauzet').includes(termSearchTerm.toLowerCase()));\n  const indexOfLastTerm = termsCurrentPage * itemsPerPage;\n  const indexOfFirstTerm = indexOfLastTerm - itemsPerPage;\n  const currentTerms = filteredTerms.slice(indexOfFirstTerm, indexOfLastTerm);\n  const totalTermPages = Math.ceil(filteredTerms.length / itemsPerPage);\n\n  // --- Funkcije za Preglede ---\n  const handleAddExamination = async newExaminationData => {\n    try {\n      const examinationPayload = {\n        pacijentID: newExaminationData.pacijentID,\n        doktorID: newExaminationData.doktorID,\n        termin: {\n          terminID: newExaminationData.terminID\n        },\n        datumPregleda: newExaminationData.datumPregleda,\n        vrijemePregleda: newExaminationData.vrijemePregleda,\n        status: newExaminationData.status,\n        komentarPacijenta: newExaminationData.komentarPacijenta,\n        ocjenaDoktora: newExaminationData.ocjenaDoktora\n      };\n      console.log('handleAddExamination - Sending Payload:', examinationPayload);\n      const response = await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, examinationPayload, authHeaders);\n      showNotification('Novi pregled uspješno dodan!', 'success');\n      fetchExaminations();\n      setShowExaminationModal(false);\n    } catch (error) {\n      var _error$response21, _error$response22, _error$response22$dat;\n      console.error(\"Greška prilikom dodavanja pregleda:\", ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || error.message);\n      showNotification(((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : (_error$response22$dat = _error$response22.data) === null || _error$response22$dat === void 0 ? void 0 : _error$response22$dat.message) || 'Greška prilikom dodavanja pregleda.', \"danger\");\n    }\n  };\n  const handleUpdateExamination = async updatedExamination => {\n    try {\n      // Backend očekuje datumPregleda i vrijemePregleda kao Stringove\n      const examinationPayload = {\n        pacijentID: updatedExamination.pacijentID,\n        doktorID: updatedExamination.doktorID,\n        termin: {\n          terminID: updatedExamination.terminID\n        },\n        datumPregleda: updatedExamination.datumPregleda,\n        // Ispravno se šalje\n        vrijemePregleda: updatedExamination.vrijemePregleda,\n        // Ispravno se šalje\n        status: updatedExamination.status,\n        komentarPacijenta: updatedExamination.komentarPacijenta,\n        ocjenaDoktora: updatedExamination.ocjenaDoktora\n      };\n      console.log('handleUpdateExamination - Sending Payload:', examinationPayload);\n      await axios.put(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi/${updatedExamination.id}`, examinationPayload, authHeaders);\n      showNotification('Pregled uspješno ažuriran!', 'success');\n      fetchExaminations();\n      setShowExaminationModal(false);\n      setEditingExamination(null);\n    } catch (error) {\n      var _error$response23, _error$response24, _error$response24$dat;\n      console.error(\"Greška prilikom ažuriranja pregleda:\", ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || error.message);\n      showNotification(((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : (_error$response24$dat = _error$response24.data) === null || _error$response24$dat === void 0 ? void 0 : _error$response24$dat.message) || 'Greška prilikom ažuriranja pregleda.', \"danger\");\n    }\n  };\n  const handleDeleteExamination = async id => {\n    showCustomConfirm('Jeste li sigurni da želite obrisati ovaj pregled?', async () => {\n      try {\n        await axios.delete(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi/${id}`, authHeaders);\n        showNotification('Pregled uspješno obrisan!', 'success');\n        fetchExaminations();\n      } catch (error) {\n        var _error$response25, _error$response26, _error$response26$dat;\n        console.error(\"Greška prilikom brisanja pregleda:\", ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : _error$response25.data) || error.message);\n        showNotification(((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : (_error$response26$dat = _error$response26.data) === null || _error$response26$dat === void 0 ? void 0 : _error$response26$dat.message) || 'Greška prilikom brisanja pregleda.', \"danger\");\n      }\n    }, \"Potvrdi brisanje pregleda\");\n  };\n  const openExaminationModal = (examination = null) => {\n    // Osiguraj da se pacijentID, doktorID i terminID pravilno prenesu u editingExamination za DataModal\n    if (examination) {\n      setEditingExamination({\n        ...examination,\n        pacijentID: examination.pacijentID,\n        doktorID: examination.doktorID,\n        terminID: examination.terminID,\n        datumPregleda: examination.datumPregleda,\n        // Dodano za konzistentnost\n        vrijemePregleda: examination.vrijemePregleda // Dodano za konzistentnost\n      });\n    } else {\n      setEditingExamination(null); // Za novi pregled, inicijaliziraj na null\n    }\n    setShowExaminationModal(true);\n  };\n\n  // Paginacija pregleda\n  const filteredExaminations = examinations.filter(exam => exam.patientName && exam.patientName.toLowerCase().includes(examinationSearchTerm.toLowerCase()) || exam.doctorName && exam.doctorName.toLowerCase().includes(examinationSearchTerm.toLowerCase()) || exam.status && exam.status.toLowerCase().includes(examinationSearchTerm.toLowerCase()) || exam.datumPregleda && exam.datumPregleda.toLowerCase().includes(examinationSearchTerm.toLowerCase()) ||\n  // PROMIJENJENO\n  exam.vrijemePregleda && exam.vrijemePregleda.toLowerCase().includes(examinationSearchTerm.toLowerCase()) // PROMIJENJENO\n  );\n  const indexOfLastExamination = examinationsCurrentPage * itemsPerPage;\n  const indexOfFirstExamination = indexOfLastExamination - itemsPerPage;\n  const currentExaminations = filteredExaminations.slice(indexOfFirstExamination, indexOfLastExamination);\n  const totalExaminationPages = Math.ceil(filteredExaminations.length / itemsPerPage);\n\n  // Komponenta za modal za unos/uređivanje podataka (Doktor/Pacijent/Termin/Pregled)\n  // Dodan `authHeaders` kao prop\n  const DataModal = ({\n    show,\n    onClose,\n    data,\n    onSave,\n    fields,\n    title,\n    idPrefix,\n    authHeaders\n  }) => {\n    _s();\n    // Inicijalizacija formData s defaultnim vrijednostima ili postojećim podacima\n    const [formData, setFormData] = useState(() => {\n      const initialData = data ? {\n        ...data\n      } : {};\n      fields.forEach(field => {\n        if (data && data[field.name] !== undefined && data[field.name] !== null) {\n          let value = data[field.name];\n          if (field.type === 'date' && typeof value === 'string' && value.includes('T')) {\n            value = value.split('T')[0]; // Formatiraj ISO string datum\n          } else if (field.type === 'time' && typeof value === 'string' && value.length > 8) {\n            value = value.substring(0, 8); // Formatiraj vrijeme (HH:MM:SS)\n          } else if (field.name === 'specijalizacije' && Array.isArray(value)) {\n            value = value[0] || ''; // Za select, uzmi prvu specijalizaciju ili prazno\n          } else if (field.type === 'checkbox') {\n            value = Boolean(value); // Pretvaranje u boolean za checkbox\n          } else if (field.type === 'number' && (value === 0 || value === 0.0)) {\n            value = ''; // Prikazati 0 ili 0.0 kao prazan string u inputu za broj\n          }\n          initialData[field.name] = value;\n        } else {\n          // Defaultne vrijednosti za novi unos (ako polje nije prisutno u 'data')\n          if (field.name === 'specijalizacije') {\n            initialData[field.name] = ''; // Prazan string za select\n          } else if (field.type === 'number') {\n            initialData[field.name] = ''; // Prazan string za brojčane inpute\n          } else if (field.type === 'checkbox') {\n            initialData[field.name] = false; // False za checkbox\n          } else {\n            initialData[field.name] = ''; // Prazan string za ostale\n          }\n        }\n      });\n      return initialData;\n    });\n    useEffect(() => {\n      const initialData = data ? {\n        ...data\n      } : {};\n      fields.forEach(field => {\n        if (data && data[field.name] !== undefined && data[field.name] !== null) {\n          let value = data[field.name];\n          if (field.type === 'date' && typeof value === 'string' && value.includes('T')) {\n            value = value.split('T')[0];\n          } else if (field.type === 'time' && typeof value === 'string' && value.length > 8) {\n            value = value.substring(0, 8);\n          } else if (field.name === 'specijalizacije' && Array.isArray(value)) {\n            value = value[0] || '';\n          } else if (field.type === 'checkbox') {\n            value = Boolean(value);\n          } else if (field.type === 'number' && (value === 0 || value === 0.0)) {\n            value = ''; // Prikazati 0 ili 0.0 kao prazan string u inputu za broj\n          }\n          initialData[field.name] = value;\n        } else {\n          if (field.name === 'specijalizacije') {\n            initialData[field.name] = '';\n          } else if (field.type === 'number') {\n            initialData[field.name] = '';\n          } else if (field.type === 'checkbox') {\n            initialData[field.name] = false;\n          } else {\n            initialData[field.name] = '';\n          }\n        }\n      });\n      setFormData(initialData);\n    }, [data, fields, idPrefix]);\n\n    // NEW useEffect: Fetch Termin details when terminID changes for examinations\n    useEffect(() => {\n      if (idPrefix === 'examination' && formData.terminID) {\n        const fetchTermDetails = async () => {\n          try {\n            const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${formData.terminID}`, authHeaders);\n            const fetchedTerm = response.data;\n            setFormData(prev => ({\n              ...prev,\n              doktorID: fetchedTerm.doktorID,\n              // Set doktorID from fetched term\n              datumPregleda: fetchedTerm.datum,\n              // Auto-fill date\n              vrijemePregleda: fetchedTerm.vrijeme.substring(0, 8) // Auto-fill time (HH:MM:SS)\n            }));\n            showNotification('Detalji termina uspješno popunjeni!', 'info');\n          } catch (error) {\n            var _error$response27;\n            console.error(\"Greška prilikom dohvaćanja detalja termina:\", ((_error$response27 = error.response) === null || _error$response27 === void 0 ? void 0 : _error$response27.data) || error.message);\n            showNotification('Greška prilikom dohvaćanja detalja termina. Provjerite Term ID.', 'danger');\n            // Optionally clear related fields if term lookup fails\n            setFormData(prev => ({\n              ...prev,\n              doktorID: '',\n              datumPregleda: '',\n              vrijemePregleda: ''\n            }));\n          }\n        };\n        fetchTermDetails();\n      }\n    }, [formData.terminID, idPrefix, authHeaders]);\n    const handleChange = e => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = e.target;\n      setFormData(prev => {\n        let newValue = value;\n        if (name === 'specijalizacije') {\n          // Ako je select, uvijek uzmi vrijednost kao string\n          newValue = value;\n        } else if (type === 'number') {\n          // Konvertiraj u broj. Ako je prazan string, postavi na 0.\n          newValue = value === '' ? 0 : Number(value); // Postavljamo na 0 umjesto null\n          if (isNaN(newValue)) {\n            newValue = 0; // Ako nije validan broj, postavi na 0\n          }\n        } else if (type === 'checkbox') {\n          newValue = checked;\n        }\n        return {\n          ...prev,\n          [name]: newValue\n        };\n      });\n    };\n    const handleSubmit = e => {\n      e.preventDefault();\n      const finalFormData = {\n        ...formData\n      };\n\n      // Specijalizacije: pretvori string u niz\n      if (idPrefix === 'doctor' && typeof finalFormData.specijalizacije === 'string') {\n        finalFormData.specijalizacije = finalFormData.specijalizacije ? [finalFormData.specijalizacije] : [];\n      }\n\n      // Osiguraj da 'iskustvo' i 'ocjena' budu brojevi (0 ili stvarna vrijednost), ne null/prazan string\n      if (finalFormData.iskustvo === null || finalFormData.iskustvo === '') {\n        finalFormData.iskustvo = 0;\n      }\n      if (finalFormData.ocjena === null || finalFormData.ocjena === '') {\n        finalFormData.ocjena = 0.0;\n      }\n\n      // Formatiranje vremena za termine i preglede (vrijemePregleda)\n      // Provjerava da li je u pitanju termin ili pregled i da li polje 'vrijeme' ili 'vrijemePregleda' postoji.\n      if (idPrefix === 'term' && finalFormData.vrijeme) {\n        // Ako je format HH:MM, dodaj :00\n        if (finalFormData.vrijeme.length === 5) {\n          finalFormData.vrijeme += ':00';\n        }\n      } else if (idPrefix === 'examination' && finalFormData.vrijemePregleda) {\n        // Ako je format HH:MM, dodaj :00\n        if (finalFormData.vrijemePregleda.length === 5) {\n          finalFormData.vrijemePregleda += ':00';\n        }\n      }\n      console.log('DataModal submitting:', finalFormData);\n      onSave(finalFormData);\n    };\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: onClose,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: fields.map(field => /*#__PURE__*/_jsxDEV(Form.Group, {\n            className: \"mb-3\",\n            controlId: `${idPrefix}-${field.name}`,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: field.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 849,\n              columnNumber: 17\n            }, this), field.type === 'select' ? /*#__PURE__*/_jsxDEV(Form.Select, {\n              name: field.name,\n              value: formData[field.name] || '' // Postavi value na prazan string ako je null/undefined\n              ,\n              onChange: handleChange,\n              required: field.required,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: [\"Select \", field.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 21\n              }, this), field.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option,\n                children: option\n              }, option, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 19\n            }, this) : field.type === 'textarea' ? /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              name: field.name,\n              value: formData[field.name] || '',\n              onChange: handleChange,\n              required: field.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 863,\n              columnNumber: 19\n            }, this) : field.type === 'checkbox' ? /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"checkbox\",\n              name: field.name,\n              checked: formData[field.name] || false // checked state for checkbox\n              ,\n              onChange: handleChange,\n              label: field.label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: field.type || 'text',\n              name: field.name\n              // Prikazuje prazan string ako je vrijednost null, undefined, 0 (za number), 'N/A'\n              ,\n              value: formData[field.name] === null || formData[field.name] === undefined || formData[field.name] === 'N/A' || field.type === 'number' && (formData[field.name] === 0 || formData[field.name] === 0.0) ? '' : formData[field.name],\n              onChange: handleChange,\n              required: field.required,\n              readOnly: field.readOnly || idPrefix === 'examination' && (field.name === 'doktorID' || field.name === 'datumPregleda' || field.name === 'vrijemePregleda') // Doktor ID, Datum i Vrijeme su ReadOnly ako su za pregled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 19\n            }, this)]\n          }, field.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: onClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Save changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 841,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Komponenta za paginaciju (postojeća)\n  _s(DataModal, \"82tsPc438EwDs/mkatVlNxJ24Sc=\");\n  const Pagination = ({\n    itemsPerPage,\n    totalItems,\n    currentPage,\n    paginate\n  }) => {\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\n      pageNumbers.push(i);\n    }\n    return /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"pagination justify-content-center mt-4\",\n        children: pageNumbers.map(number => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `page-item ${currentPage === number ? 'active' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => paginate(number),\n            className: \"page-link\",\n            children: number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 15\n          }, this)\n        }, number, false, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 915,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Funkcija za renderovanje sadržaja na osnovu aktivnog taba\n  const renderContent = () => {\n    // Ažurirana polja za dodavanje/uređivanje doktora\n    const addDoctorFields = [{\n      name: 'ime',\n      label: 'First Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'prezime',\n      label: 'Last Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'email',\n      label: 'Email',\n      type: 'email',\n      required: true\n    }, {\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      required: true\n    }, {\n      name: 'telefon',\n      label: 'Phone',\n      type: 'text',\n      required: false\n    }, {\n      name: 'grad',\n      label: 'City',\n      type: 'select',\n      required: true,\n      options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać']\n    }, {\n      name: 'specijalizacije',\n      label: 'Specialty',\n      type: 'select',\n      required: true,\n      options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar']\n    }, {\n      name: 'radnoVrijeme',\n      label: 'Work Hours',\n      type: 'text',\n      required: false\n    }, {\n      name: 'iskustvo',\n      label: 'Experience (years)',\n      type: 'number',\n      required: false\n    }\n    // Uklonjeno: ocjena, jer se ona izračunava automatski\n    ];\n    const editDoctorFields = [{\n      name: 'id',\n      label: 'Doctor ID',\n      type: 'text',\n      readOnly: true\n    },\n    // Dodano: ID polje za prikaz kod editovanja\n    {\n      name: 'ime',\n      label: 'First Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'prezime',\n      label: 'Last Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'email',\n      label: 'Email',\n      type: 'email',\n      required: true\n    }, {\n      name: 'telefon',\n      label: 'Phone',\n      type: 'text',\n      required: false\n    }, {\n      name: 'grad',\n      label: 'City',\n      type: 'select',\n      required: true,\n      options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać']\n    }, {\n      name: 'specijalizacije',\n      label: 'Specialty',\n      type: 'select',\n      required: true,\n      options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar']\n    }, {\n      name: 'radnoVrijeme',\n      label: 'Work Hours',\n      type: 'text',\n      required: false\n    }, {\n      name: 'iskustvo',\n      label: 'Experience (years)',\n      type: 'number',\n      required: false\n    }\n    // Uklonjeno: ocjena\n    ];\n    const addPatientFields = [{\n      name: 'ime',\n      label: 'First Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'prezime',\n      label: 'Last Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'email',\n      label: 'Email',\n      type: 'email',\n      required: true\n    }, {\n      name: 'password',\n      label: 'Password',\n      type: 'password',\n      required: true\n    }, {\n      name: 'telefon',\n      label: 'Phone',\n      type: 'text',\n      required: false\n    }];\n    const editPatientFields = [{\n      name: 'id',\n      label: 'Patient ID',\n      type: 'text',\n      readOnly: true\n    },\n    // Dodano: ID polje za prikaz kod editovanja\n    {\n      name: 'ime',\n      label: 'First Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'prezime',\n      label: 'Last Name',\n      type: 'text',\n      required: true\n    }, {\n      name: 'email',\n      label: 'Email',\n      type: 'email',\n      required: true\n    }, {\n      name: 'telefon',\n      label: 'Phone',\n      type: 'text',\n      required: false\n    }];\n\n    // Polja za Termine\n    const addTermFields = [{\n      name: 'doktorID',\n      label: 'Doctor ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'datum',\n      label: 'Date (YYYY-MM-DD)',\n      type: 'date',\n      required: true\n    }, {\n      name: 'vrijeme',\n      label: 'Time (HH:MM:SS)',\n      type: 'time',\n      required: true\n    }, {\n      name: 'dostupnost',\n      label: 'Available',\n      type: 'checkbox',\n      required: false\n    }];\n    const editTermFields = [{\n      name: 'id',\n      label: 'Term ID (Auto)',\n      type: 'text',\n      required: false,\n      readOnly: true\n    }, {\n      name: 'doktorID',\n      label: 'Doctor ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'datum',\n      label: 'Date (YYYY-MM-DD)',\n      type: 'date',\n      required: true\n    }, {\n      name: 'vrijeme',\n      label: 'Time (HH:MM:SS)',\n      type: 'time',\n      required: true\n    }, {\n      name: 'dostupnost',\n      label: 'Available',\n      type: 'checkbox',\n      required: false\n    }];\n\n    // Polja za Preglede\n    const addExaminationFields = [{\n      name: 'pacijentID',\n      label: 'Patient ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'doktorID',\n      label: 'Doctor ID',\n      type: 'number',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'terminID',\n      label: 'Term ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'datumPregleda',\n      label: 'Date of Examination (YYYY-MM-DD)',\n      type: 'date',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'vrijemePregleda',\n      label: 'Time of Examination (HH:MM:SS)',\n      type: 'time',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'status',\n      label: 'Status',\n      type: 'select',\n      required: true,\n      options: ['zakazan', 'obavljen', 'otkazan']\n    }, {\n      name: 'komentarPacijenta',\n      label: 'Patient Comment',\n      type: 'textarea',\n      required: false\n    }, {\n      name: 'ocjenaDoktora',\n      label: 'Doctor Rating (0.0-5.0)',\n      type: 'number',\n      required: false\n    }];\n    const editExaminationFields = [{\n      name: 'id',\n      label: 'Examination ID (Auto)',\n      type: 'text',\n      readOnly: true\n    }, {\n      name: 'pacijentID',\n      label: 'Patient ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'doktorID',\n      label: 'Doctor ID',\n      type: 'number',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'terminID',\n      label: 'Term ID',\n      type: 'number',\n      required: true\n    }, {\n      name: 'datumPregleda',\n      label: 'Date of Examination (YYYY-MM-DD)',\n      type: 'date',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'vrijemePregleda',\n      label: 'Time of Examination (HH:MM:SS)',\n      type: 'time',\n      required: true,\n      readOnly: true\n    },\n    // Postavljeno na readOnly\n    {\n      name: 'status',\n      label: 'Status',\n      type: 'select',\n      required: true,\n      options: ['zakazan', 'obavljen', 'otkazan']\n    }, {\n      name: 'komentarPacijenta',\n      label: 'Patient Comment',\n      type: 'textarea',\n      required: false\n    }, {\n      name: 'ocjenaDoktora',\n      label: 'Doctor Rating (0.0-5.0)',\n      type: 'number',\n      required: false\n    }];\n    switch (activeTab) {\n      case 'overview':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Dashboard Overview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row g-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card text-white bg-primary mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-header\",\n                  children: \"Total Doctors\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1022,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title display-4\",\n                    children: doctors.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1024,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1023,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card text-white bg-success mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-header\",\n                  children: \"Total Patients\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1030,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title display-4\",\n                    children: patients.length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1032,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1031,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1029,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card text-white bg-info mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-header\",\n                  children: \"Available Terms\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1038,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title display-4\",\n                    children: terms.filter(t => t.dostupnost === true).length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1040,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1039,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1037,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card text-white bg-warning mb-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-header\",\n                  children: \"Pending Examinations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1046,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title display-4\",\n                    children: examinations.filter(exam => exam.status === 'zakazan').length\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1048,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1047,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1045,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1044,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Quick Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1054,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex gap-2 flex-wrap\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-outline-primary\",\n                onClick: () => openDoctorModal(),\n                children: \"Add New Doctor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1056,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-outline-success\",\n                onClick: () => openPatientModal(),\n                children: \"Add New Patient\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1057,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-outline-info\",\n                onClick: () => openTermModal(),\n                children: \"Add New Term\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1058,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-outline-warning\",\n                onClick: () => openExaminationModal(),\n                children: \"Add New Examination\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1059,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1055,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1017,\n          columnNumber: 11\n        }, this);\n      case 'doctors':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Manage Doctors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1067,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => openDoctorModal(),\n              children: \"Add New Doctor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1069,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control w-25\",\n              placeholder: \"Search doctors...\",\n              value: doctorSearchTerm,\n              onChange: e => setDoctorSearchTerm(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1070,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1068,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-striped table-hover\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1082,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1083,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Specialty\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1084,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"City\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1085,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1086,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Phone\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1087,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Work Hours\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1088,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Experience\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1089,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Rating\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1090,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1091,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1081,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1080,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: currentDoctors.length > 0 ? currentDoctors.map(doctor => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1098,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1099,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.specialty\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1100,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.city\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1101,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.email\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1102,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.telefon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1103,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.radnoVrijeme\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1104,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.iskustvo\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1105,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: doctor.ocjena\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1106,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-info btn-sm me-2\",\n                      onClick: () => openDoctorModal(doctor),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1108,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-danger btn-sm\",\n                      onClick: () => handleDeleteDoctor(doctor.id),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1109,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1107,\n                    columnNumber: 25\n                  }, this)]\n                }, doctor.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1097,\n                  columnNumber: 23\n                }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"10\",\n                    className: \"text-center\",\n                    children: \"No doctors found.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1115,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1114,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1094,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1079,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1078,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n            itemsPerPage: itemsPerPage,\n            totalItems: filteredDoctors.length,\n            currentPage: doctorsCurrentPage,\n            paginate: setDoctorsCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 11\n        }, this);\n      case 'patients':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Manage Patients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => openPatientModal(),\n              children: \"Add New Patient\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control w-25\",\n              placeholder: \"Search patients...\",\n              value: patientSearchTerm,\n              onChange: e => setPatientSearchTerm(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-striped table-hover\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1147,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1148,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Email\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1149,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Phone\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1150,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1151,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1146,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1145,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: currentPatients.length > 0 ? currentPatients.map(patient => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: patient.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1158,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: patient.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1159,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: patient.email\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1160,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: patient.phone\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1161,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-info btn-sm me-2\",\n                      onClick: () => openPatientModal(patient),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1163,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-danger btn-sm\",\n                      onClick: () => handleDeletePatient(patient.id),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1164,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1162,\n                    columnNumber: 25\n                  }, this)]\n                }, patient.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1157,\n                  columnNumber: 23\n                }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"5\",\n                    className: \"text-center\",\n                    children: \"No patients found.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1170,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1169,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1154,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1144,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n            itemsPerPage: itemsPerPage,\n            totalItems: filteredPatients.length,\n            currentPage: patientsCurrentPage,\n            paginate: setPatientsCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1131,\n          columnNumber: 11\n        }, this);\n      case 'terms':\n        // Novi tab za termine\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Manage Terms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => openTermModal(),\n              children: \"Add New Term\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control w-25\",\n              placeholder: \"Search terms...\",\n              value: termSearchTerm,\n              onChange: e => setTermSearchTerm(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1190,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-striped table-hover\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1202,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Doctor ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1203,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1204,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1205,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Available\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1206,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1207,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1201,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: currentTerms.length > 0 ? currentTerms.map(term => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: term.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1214,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: term.doktorID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: term.datum\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1216,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: term.vrijeme\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1217,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: term.dostupnost ? 'Dostupan' : 'Zauzet'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1218,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-info btn-sm me-2\",\n                      onClick: () => openTermModal(term),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1220,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-danger btn-sm\",\n                      onClick: () => handleDeleteTerm(term.id),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1221,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1219,\n                    columnNumber: 25\n                  }, this)]\n                }, term.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1213,\n                  columnNumber: 23\n                }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"6\",\n                    className: \"text-center\",\n                    children: \"No terms found.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1227,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1226,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1210,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n            itemsPerPage: itemsPerPage,\n            totalItems: filteredTerms.length,\n            currentPage: termsCurrentPage,\n            paginate: setTermsCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1186,\n          columnNumber: 11\n        }, this);\n      case 'examinations':\n        // Novi tab za preglede (prethodno appointments)\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Manage Examinations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => openExaminationModal(),\n              children: \"Add New Examination\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control w-25\",\n              placeholder: \"Search examinations...\",\n              value: examinationSearchTerm,\n              onChange: e => setExaminationSearchTerm(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1247,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive\",\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-striped table-hover\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1259,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Patient\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1260,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Doctor\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1261,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Term ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1262,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1263,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1264,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1265,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Patient Comment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1266,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Doctor Rating\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1267,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1268,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1258,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1257,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: currentExaminations.length > 0 ? currentExaminations.map(examination => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1275,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.patientName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1276,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.doctorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1277,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.terminID\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1278,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.datumPregleda\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1279,\n                    columnNumber: 25\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.vrijemePregleda\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1280,\n                    columnNumber: 25\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"select\", {\n                      className: \"form-select\",\n                      value: examination.status,\n                      onChange: e => handleUpdateExamination({\n                        ...examination,\n                        status: e.target.value,\n                        datumPregleda: examination.datumPregleda,\n                        // Explicitno dodaj datum\n                        vrijemePregleda: examination.vrijemePregleda // Explicitno dodaj vrijeme\n                      }),\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"zakazan\",\n                        children: \"Zakazan\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1294,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"obavljen\",\n                        children: \"Obavljen\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1295,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"otkazan\",\n                        children: \"Otkazan\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1296,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1282,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1281,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.komentarPacijenta\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1299,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: examination.ocjenaDoktora\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1300,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-info btn-sm me-2\",\n                      onClick: () => openExaminationModal(examination),\n                      children: \"Edit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1302,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-danger btn-sm\",\n                      onClick: () => handleDeleteExamination(examination.id),\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1303,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1301,\n                    columnNumber: 25\n                  }, this)]\n                }, examination.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1274,\n                  columnNumber: 23\n                }, this)) : /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"10\",\n                    className: \"text-center\",\n                    children: \"No examinations found.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1309,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1308,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1271,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1256,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n            itemsPerPage: itemsPerPage,\n            totalItems: filteredExaminations.length,\n            currentPage: examinationsCurrentPage,\n            paginate: setExaminationsCurrentPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1243,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a tab to view content.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1324,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  // Definisanje polja za dodavanje/uređivanje doktora\n  const addDoctorFields = [{\n    name: 'ime',\n    label: 'First Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'prezime',\n    label: 'Last Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n    required: true\n  }, {\n    name: 'password',\n    label: 'Password',\n    type: 'password',\n    required: true\n  }, {\n    name: 'telefon',\n    label: 'Phone',\n    type: 'text',\n    required: false\n  }, {\n    name: 'grad',\n    label: 'City',\n    type: 'select',\n    required: true,\n    options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać']\n  }, {\n    name: 'specijalizacije',\n    label: 'Specialty',\n    type: 'select',\n    required: true,\n    options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar']\n  }, {\n    name: 'radnoVrijeme',\n    label: 'Work Hours',\n    type: 'text',\n    required: false\n  }, {\n    name: 'iskustvo',\n    label: 'Experience (years)',\n    type: 'number',\n    required: false\n  }\n  // Uklonjeno: ocjena, jer se ona izračunava automatski\n  ];\n  const editDoctorFields = [{\n    name: 'id',\n    label: 'Doctor ID',\n    type: 'text',\n    readOnly: true\n  },\n  // Dodano: ID polje za prikaz kod editovanja\n  {\n    name: 'ime',\n    label: 'First Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'prezime',\n    label: 'Last Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n    required: true\n  }, {\n    name: 'telefon',\n    label: 'Phone',\n    type: 'text',\n    required: false\n  }, {\n    name: 'grad',\n    label: 'City',\n    type: 'select',\n    required: true,\n    options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać']\n  }, {\n    name: 'specijalizacije',\n    label: 'Specialty',\n    type: 'select',\n    required: true,\n    options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar']\n  }, {\n    name: 'radnoVrijeme',\n    label: 'Work Hours',\n    type: 'text',\n    required: false\n  }, {\n    name: 'iskustvo',\n    label: 'Experience (years)',\n    type: 'number',\n    required: false\n  }\n  // Uklonjeno: ocjena\n  ];\n  const addPatientFields = [{\n    name: 'ime',\n    label: 'First Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'prezime',\n    label: 'Last Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n    required: true\n  }, {\n    name: 'password',\n    label: 'Password',\n    type: 'password',\n    required: true\n  }, {\n    name: 'telefon',\n    label: 'Phone',\n    type: 'text',\n    required: false\n  }];\n  const editPatientFields = [{\n    name: 'id',\n    label: 'Patient ID',\n    type: 'text',\n    readOnly: true\n  },\n  // Dodano: ID polje za prikaz kod editovanja\n  {\n    name: 'ime',\n    label: 'First Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'prezime',\n    label: 'Last Name',\n    type: 'text',\n    required: true\n  }, {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n    required: true\n  }, {\n    name: 'telefon',\n    label: 'Phone',\n    type: 'text',\n    required: false\n  }];\n\n  // Polja za Termine\n  const addTermFields = [{\n    name: 'doktorID',\n    label: 'Doctor ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'datum',\n    label: 'Date (YYYY-MM-DD)',\n    type: 'date',\n    required: true\n  }, {\n    name: 'vrijeme',\n    label: 'Time (HH:MM:SS)',\n    type: 'time',\n    required: true\n  }, {\n    name: 'dostupnost',\n    label: 'Available',\n    type: 'checkbox',\n    required: false\n  }];\n  const editTermFields = [{\n    name: 'id',\n    label: 'Term ID (Auto)',\n    type: 'text',\n    required: false,\n    readOnly: true\n  }, {\n    name: 'doktorID',\n    label: 'Doctor ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'datum',\n    label: 'Date (YYYY-MM-DD)',\n    type: 'date',\n    required: true\n  }, {\n    name: 'vrijeme',\n    label: 'Time (HH:MM:SS)',\n    type: 'time',\n    required: true\n  }, {\n    name: 'dostupnost',\n    label: 'Available',\n    type: 'checkbox',\n    required: false\n  }];\n\n  // Polja za Preglede\n  const addExaminationFields = [{\n    name: 'pacijentID',\n    label: 'Patient ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'doktorID',\n    label: 'Doctor ID',\n    type: 'number',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'terminID',\n    label: 'Term ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'datumPregleda',\n    label: 'Date of Examination (YYYY-MM-DD)',\n    type: 'date',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'vrijemePregleda',\n    label: 'Time of Examination (HH:MM:SS)',\n    type: 'time',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'status',\n    label: 'Status',\n    type: 'select',\n    required: true,\n    options: ['zakazan', 'obavljen', 'otkazan']\n  }, {\n    name: 'komentarPacijenta',\n    label: 'Patient Comment',\n    type: 'textarea',\n    required: false\n  }, {\n    name: 'ocjenaDoktora',\n    label: 'Doctor Rating (0.0-5.0)',\n    type: 'number',\n    required: false\n  }];\n  const editExaminationFields = [{\n    name: 'id',\n    label: 'Examination ID (Auto)',\n    type: 'text',\n    readOnly: true\n  }, {\n    name: 'pacijentID',\n    label: 'Patient ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'doktorID',\n    label: 'Doctor ID',\n    type: 'number',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'terminID',\n    label: 'Term ID',\n    type: 'number',\n    required: true\n  }, {\n    name: 'datumPregleda',\n    label: 'Date of Examination (YYYY-MM-DD)',\n    type: 'date',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'vrijemePregleda',\n    label: 'Time of Examination (HH:MM:SS)',\n    type: 'time',\n    required: true,\n    readOnly: true\n  }, {\n    name: 'status',\n    label: 'Status',\n    type: 'select',\n    required: true,\n    options: ['zakazan', 'obavljen', 'otkazan']\n  }, {\n    name: 'komentarPacijenta',\n    label: 'Patient Comment',\n    type: 'textarea',\n    required: false\n  }, {\n    name: 'ocjenaDoktora',\n    label: 'Doctor Rating (0.0-5.0)',\n    type: 'number',\n    required: false\n  }];\n\n  // Prikazuje spinner za učitavanje ako je `loadingInitial` true\n  if (loadingInitial) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-border text-primary\",\n        role: \"status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"U\\u010Ditavanje administratorskog panela...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1417,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1415,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Ako je `loadingInitial` false, a `token` je null (što znači da AuthContext kaže da nismo ulogovani)\n  // i provjera autentifikacije je završena, prikaži poruku o odbijenom pristupu.\n  if (!loadingInitial && !token && isAuthChecked) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-danger\",\n          children: \"Pristup odbijen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"lead\",\n          children: \"Niste autorizovani za pristup ovoj stranici. Molimo prijavite se kao administrator.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1430,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1427,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [showAlert && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: alertType,\n      onClose: () => setShowAlert(false),\n      dismissible: true,\n      className: \"position-fixed top-0 start-50 translate-middle-x mt-3\",\n      style: {\n        zIndex: 1050\n      },\n      children: alertMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1442,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showConfirmModal,\n      onHide: () => setShowConfirmModal(false),\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: confirmTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1450,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: confirmMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowConfirmModal(false),\n          children: \"Poni\\u0161ti\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1456,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: handleConfirmAction,\n          children: \"Potvrdi\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1459,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1455,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1448,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\",\n        style: {\n          minHeight: '100vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"position-sticky pt-3\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"nav flex-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"nav-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: `nav-link ${activeTab === 'overview' ? 'active' : ''}`,\n                href: \"#\",\n                onClick: () => setActiveTab('overview'),\n                children: \"Overview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1471,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1470,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"nav-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: `nav-link ${activeTab === 'doctors' ? 'active' : ''}`,\n                href: \"#\",\n                onClick: () => setActiveTab('doctors'),\n                children: \"Doctors\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1476,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1475,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"nav-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: `nav-link ${activeTab === 'patients' ? 'active' : ''}`,\n                href: \"#\",\n                onClick: () => setActiveTab('patients'),\n                children: \"Patients\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1481,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1480,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"nav-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: `nav-link ${activeTab === 'terms' ? 'active' : ''}`,\n                href: \"#\",\n                onClick: () => setActiveTab('terms'),\n                children: \"Terms\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1486,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1485,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"nav-item\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: `nav-link ${activeTab === 'examinations' ? 'active' : ''}`,\n                href: \"#\",\n                onClick: () => setActiveTab('examinations'),\n                children: \"Examinations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1491,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1490,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1469,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1468,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4\",\n        children: renderContent()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1465,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataModal, {\n      show: showDoctorModal,\n      onClose: () => setShowDoctorModal(false),\n      data: editingDoctor,\n      onSave: editingDoctor ? handleUpdateDoctor : handleAddDoctor,\n      title: editingDoctor ? 'Edit Doctor' : 'Add New Doctor',\n      idPrefix: \"doctor\",\n      fields: editingDoctor ? editDoctorFields : addDoctorFields,\n      authHeaders: authHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1506,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataModal, {\n      show: showPatientModal,\n      onClose: () => setShowPatientModal(false),\n      data: editingPatient,\n      onSave: editingPatient ? handleUpdatePatient : handleAddPatient,\n      title: editingPatient ? 'Edit Patient' : 'Add New Patient',\n      idPrefix: \"patient\",\n      fields: editingPatient ? editPatientFields : addPatientFields,\n      authHeaders: authHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataModal, {\n      show: showTermModal,\n      onClose: () => setShowTermModal(false),\n      data: editingTerm,\n      onSave: editingTerm ? handleUpdateTerm : handleAddTerm,\n      title: editingTerm ? 'Edit Term' : 'Add New Term',\n      idPrefix: \"term\",\n      fields: editingTerm ? editTermFields : addTermFields,\n      authHeaders: authHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataModal, {\n      show: showExaminationModal,\n      onClose: () => setShowExaminationModal(false),\n      data: editingExamination,\n      onSave: editingExamination ? handleUpdateExamination : handleAddExamination,\n      title: editingExamination ? 'Edit Examination' : 'Add New Examination',\n      idPrefix: \"examination\",\n      fields: editingExamination ? editExaminationFields : addExaminationFields,\n      authHeaders: authHeaders\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1542,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1439,\n    columnNumber: 5\n  }, this);\n}\n_s2(AdminDashboard, \"afq1K7bojrsB5rih4YDmr06H6ZE=\", false, function () {\n  return [useAuth];\n});\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","axios","useAuth","Modal","Button","Form","Alert","jsxDEV","_jsxDEV","GATEWAY_BASE_URL","KORISNICI_DOKTORI_API_PREFIX","TERMINI_PREGLEDI_API_PREFIX","AUTH_API_PREFIX","AdminDashboard","_s2","_s","$RefreshSig$","token","authHeaders","headers","loadingInitial","setLoadingInitial","isAuthChecked","setIsAuthChecked","activeTab","setActiveTab","savedTab","localStorage","getItem","doctors","setDoctors","patients","setPatients","examinations","setExaminations","terms","setTerms","showDoctorModal","setShowDoctorModal","editingDoctor","setEditingDoctor","showPatientModal","setShowPatientModal","editingPatient","setEditingPatient","showTermModal","setShowTermModal","editingTerm","setEditingTerm","showExaminationModal","setShowExaminationModal","editingExamination","setEditingExamination","showAlert","setShowAlert","alertMessage","setAlertMessage","alertType","setAlertType","doctorSearchTerm","setDoctorSearchTerm","patientSearchTerm","setPatientSearchTerm","termSearchTerm","setTermSearchTerm","examinationSearchTerm","setExaminationSearchTerm","doctorsCurrentPage","setDoctorsCurrentPage","patientsCurrentPage","setPatientsCurrentPage","termsCurrentPage","setTermsCurrentPage","examinationsCurrentPage","setExaminationsCurrentPage","itemsPerPage","showNotification","message","type","setTimeout","fetchDoctors","response","get","transformedDoctors","data","map","doc","id","doktorID","userId","name","ime","prezime","specialty","Array","isArray","specijalizacije","length","join","city","grad","email","telefon","radnoVrijeme","iskustvo","undefined","ocjena","error","_error$response","console","fetchPatients","transformedPatients","pat","pacijentID","phone","_error$response2","fetchTerms","transformedTerms","term","terminID","datum","vrijeme","dostupnost","_error$response3","fetchExaminations","transformedExaminations","app","pregledID","patientName","pacijentIme","doctorName","doktorIme","datumPregleda","vrijemePregleda","status","komentarPacijenta","ocjenaDoktora","termin","_error$response4","initializeDashboard","Promise","all","warn","setItem","handleAddDoctor","newDoctorData","_authResponse$data$us","registerPayload","password","fullName","roles","authResponse","post","log","user","Error","doctorDetailsPayload","put","_error$response5","_error$response6","_error$response6$data","handleUpdateDoctor","updatedDoctor","doctorUpdatePayload","userUpdatePayload","_error$response7","_error$response8","_error$response8$data","showConfirmModal","setShowConfirmModal","confirmAction","setConfirmAction","confirmMessage","setConfirmMessage","confirmTitle","setConfirmTitle","showCustomConfirm","action","title","handleConfirmAction","handleDeleteDoctor","doctorToDelete","find","delete","_error$response9","_error$response0","_error$response0$data","openDoctorModal","doctor","filteredDoctors","filter","toLowerCase","includes","indexOfLastDoctor","indexOfFirstDoctor","currentDoctors","slice","totalDoctorPages","Math","ceil","handleAddPatient","newPatient","_authResponse$data$us2","_error$response1","_error$response10","_error$response10$dat","handleUpdatePatient","updatedPatient","patientUpdatePayload","_error$response11","_error$response12","_error$response12$dat","handleDeletePatient","patientToDelete","_error$response13","_error$response14","_error$response14$dat","openPatientModal","patient","filteredPatients","indexOfLastPatient","indexOfFirstPatient","currentPatients","totalPatientPages","handleAddTerm","newTermData","_error$response15","_error$response16","_error$response16$dat","handleUpdateTerm","updatedTerm","termPayload","_error$response17","_error$response18","_error$response18$dat","handleDeleteTerm","_error$response19","_error$response20","_error$response20$dat","openTermModal","filteredTerms","toString","indexOfLastTerm","indexOfFirstTerm","currentTerms","totalTermPages","handleAddExamination","newExaminationData","examinationPayload","_error$response21","_error$response22","_error$response22$dat","handleUpdateExamination","updatedExamination","_error$response23","_error$response24","_error$response24$dat","handleDeleteExamination","_error$response25","_error$response26","_error$response26$dat","openExaminationModal","examination","filteredExaminations","exam","indexOfLastExamination","indexOfFirstExamination","currentExaminations","totalExaminationPages","DataModal","show","onClose","onSave","fields","idPrefix","formData","setFormData","initialData","forEach","field","value","split","substring","Boolean","fetchTermDetails","fetchedTerm","prev","_error$response27","handleChange","e","checked","target","newValue","Number","isNaN","handleSubmit","preventDefault","finalFormData","onHide","centered","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Body","Group","className","controlId","Label","label","Select","onChange","required","options","option","Control","as","rows","Check","readOnly","Footer","variant","onClick","Pagination","totalItems","currentPage","paginate","pageNumbers","i","push","number","renderContent","addDoctorFields","editDoctorFields","addPatientFields","editPatientFields","addTermFields","editTermFields","addExaminationFields","editExaminationFields","t","placeholder","colSpan","style","minHeight","role","dismissible","zIndex","href","_c","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/pages/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\r\n\r\nconst GATEWAY_BASE_URL = 'http://localhost:8081';\r\n\r\n// Ovi prefiksi sada sadrže gateway URL i context-path servisa.\r\n// Pretpostavljamo da backend servisi interno imaju /api/ prefiks za svoje kontrolere.\r\nconst KORISNICI_DOKTORI_API_PREFIX = `${GATEWAY_BASE_URL}/api/korisnici-doktori`;\r\nconst TERMINI_PREGLEDI_API_PREFIX = `${GATEWAY_BASE_URL}/api/termini-pregledi`;\r\nconst AUTH_API_PREFIX = `${GATEWAY_BASE_URL}/auth`;\r\n\r\nfunction AdminDashboard() {\r\n  const { token } = useAuth();\r\n\r\n  // Korištenje useMemo za memoizaciju authHeaders.\r\n  // Objekt će se rekreirati samo kada se 'token' promijeni,\r\n  // što sprečava nepotrebne re-rendere djece koja ovise o njemu.\r\n  const authHeaders = useMemo(() => ({\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    }\r\n  }), [token]); // Ovisi samo o tokenu\r\n\r\n  // Stanje za praćenje početnog učitavanja panela i autentifikacije\r\n  const [loadingInitial, setLoadingInitial] = useState(true);\r\n  const [isAuthChecked, setIsAuthChecked] = useState(false);\r\n\r\n  // Aktivni tab, sa čuvanjem u lokalnom skladištu\r\n  const [activeTab, setActiveTab] = useState(() => {\r\n    const savedTab = localStorage.getItem('adminActiveTab');\r\n    return savedTab || 'overview';\r\n  });\r\n\r\n  // Stanja za podatke iz API-ja\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [patients, setPatients] = useState([]);\r\n  const [examinations, setExaminations] = useState([]); // Promijenjeno iz appointments u examinations\r\n  const [terms, setTerms] = useState([]); // Novo stanje za termine\r\n\r\n  // Stanja za modale i forme\r\n  const [showDoctorModal, setShowDoctorModal] = useState(false);\r\n  const [editingDoctor, setEditingDoctor] = useState(null); // Čuva podatke doktora za uređivanje\r\n  const [showPatientModal, setShowPatientModal] = useState(false);\r\n  const [editingPatient, setEditingPatient] = useState(null);\r\n  const [showTermModal, setShowTermModal] = useState(false); // Novo stanje za modal termina\r\n  const [editingTerm, setEditingTerm] = useState(null); // Novo stanje za uređivanje termina\r\n  const [showExaminationModal, setShowExaminationModal] = useState(false); // Novo stanje za modal pregleda\r\n  const [editingExamination, setEditingExamination] = useState(null); // Novo stanje za uređivanje pregleda\r\n\r\n\r\n  // Stanja za notifikacije (Alert)\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [alertType, setAlertType] = useState('success');\r\n\r\n  // Stanja za pretragu\r\n  const [doctorSearchTerm, setDoctorSearchTerm] = useState('');\r\n  const [patientSearchTerm, setPatientSearchTerm] = useState('');\r\n  const [termSearchTerm, setTermSearchTerm] = useState(''); // Novo za pretragu termina\r\n  const [examinationSearchTerm, setExaminationSearchTerm] = useState(''); // Novo za pretragu pregleda\r\n\r\n  // Stanja za paginaciju\r\n  const [doctorsCurrentPage, setDoctorsCurrentPage] = useState(1);\r\n  const [patientsCurrentPage, setPatientsCurrentPage] = useState(1);\r\n  const [termsCurrentPage, setTermsCurrentPage] = useState(1); // Novo za paginaciju termina\r\n  const [examinationsCurrentPage, setExaminationsCurrentPage] = useState(1); // Promijenjeno iz appointmentsCurrentPage\r\n  const itemsPerPage = 5; // Broj stavki po stranici\r\n\r\n  // Funkcija za prikaz notifikacija\r\n  const showNotification = (message, type = 'success') => {\r\n    setAlertMessage(message);\r\n    setAlertType(type);\r\n    setShowAlert(true);\r\n    setTimeout(() => {\r\n      setShowAlert(false);\r\n      setAlertMessage('');\r\n    }, 3000); // Notifikacija nestaje nakon 3 sekunde\r\n  };\r\n\r\n  // Funkcije za dohvat podataka sa backend-a\r\n  const fetchDoctors = async () => {\r\n    try {\r\n      const response = await axios.get(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori`, authHeaders);\r\n      const transformedDoctors = response.data.map(doc => ({\r\n        id: doc.doktorID,\r\n        userId: doc.userId,\r\n        name: `${doc.ime} ${doc.prezime}`,\r\n        ime: doc.ime,\r\n        prezime: doc.prezime,\r\n        specialty: Array.isArray(doc.specijalizacije) && doc.specijalizacije.length > 0\r\n                   ? doc.specijalizacije.join(', ')\r\n                   : 'N/A',\r\n        specijalizacije: doc.specijalizacije,\r\n        city: doc.grad || 'N/A',\r\n        grad: doc.grad,\r\n        email: doc.email || 'N/A',\r\n        telefon: doc.telefon || 'N/A',\r\n        radnoVrijeme: doc.radnoVrijeme || '', // Prazan string umjesto 'N/A' za bolji prikaz\r\n        iskustvo: doc.iskustvo !== null && doc.iskustvo !== undefined ? doc.iskustvo : '', // Prazan string umjesto 'N/A'\r\n        ocjena: doc.ocjena !== null && doc.ocjena !== undefined ? doc.ocjena : 0.0, // Ocjena 0.0 umjesto 'N/A'\r\n      }));\r\n      setDoctors(transformedDoctors);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dohvaćanja doktora:\", error.response?.data || error.message);\r\n      showNotification(\"Greška prilikom dohvaćanja doktora sa servera.\", \"danger\");\r\n    }\r\n  };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await axios.get(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti`, authHeaders);\r\n      const transformedPatients = response.data.map(pat => ({\r\n        id: pat.pacijentID,\r\n        userId: pat.userId,\r\n        name: `${pat.ime} ${pat.prezime}`,\r\n        ime: pat.ime,\r\n        prezime: pat.prezime,\r\n        email: pat.email || 'N/A',\r\n        phone: pat.telefon || 'N/A',\r\n        telefon: pat.telefon,\r\n      }));\r\n      setPatients(transformedPatients);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dohvaćanja pacijenata:\", error.response?.data || error.message);\r\n      showNotification(\"Greška prilikom dohvaćanja pacijenata sa servera.\", \"danger\");\r\n    }\r\n  };\r\n\r\n  // Nova funkcija za dohvaćanje termina\r\n  const fetchTerms = async () => {\r\n    try {\r\n      const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini`, authHeaders);\r\n      const transformedTerms = response.data.map(term => ({\r\n        id: term.terminID,\r\n        doktorID: term.doktorID,\r\n        datum: term.datum,\r\n        vrijeme: term.vrijeme,\r\n        dostupnost: term.dostupnost, // Keep as boolean for the checkbox\r\n      }));\r\n      setTerms(transformedTerms);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dohvaćanja termina:\", error.response?.data || error.message);\r\n      showNotification(\"Greška prilikom dohvaćanja termina sa servera.\", \"danger\");\r\n    }\r\n  };\r\n\r\n  // Funkcija za dohvaćanje pregleda (prethodno appointments)\r\n  const fetchExaminations = async () => {\r\n    try {\r\n      const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, authHeaders);\r\n      const transformedExaminations = response.data.map(app => ({\r\n        id: app.pregledID,\r\n        pacijentID: app.pacijentID,\r\n        doktorID: app.doktorID,\r\n        patientName: app.pacijentIme || 'N/A',\r\n        doctorName: app.doktorIme || 'N/A',\r\n        datumPregleda: app.datumPregleda, // PROMIJENJENO: Ime ključa usklađeno sa backendom\r\n        vrijemePregleda: app.vrijemePregleda, // PROMIJENJENO: Ime ključa usklađeno sa backendom\r\n        status: app.status,\r\n        komentarPacijenta: app.komentarPacijenta || '',\r\n        ocjenaDoktora: app.ocjenaDoktora || null,\r\n        terminID: app.termin ? app.termin.terminID : 'N/A',\r\n      }));\r\n      setExaminations(transformedExaminations);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dohvaćanja pregleda:\", error.response?.data || error.message);\r\n      showNotification(\"Greška prilikom dohvaćanja pregleda sa servera.\", \"danger\");\r\n    }\r\n  };\r\n\r\n  // Glavni useEffect hook za provjeru autentifikacije i dohvat podataka\r\n  useEffect(() => {\r\n    if (token !== undefined && !isAuthChecked) {\r\n      setIsAuthChecked(true);\r\n    }\r\n\r\n    const initializeDashboard = async () => {\r\n      if (isAuthChecked) {\r\n        if (token) {\r\n          try {\r\n            await Promise.all([\r\n              fetchDoctors(),\r\n              fetchPatients(),\r\n              fetchTerms(),      // Dohvati termine\r\n              fetchExaminations() // Dohvati preglede\r\n            ]);\r\n          } catch (error) {\r\n            console.error(\"Greška prilikom inicijalnog dohvaćanja podataka:\", error);\r\n            showNotification(\"Greška prilikom učitavanja početnih podataka.\", \"danger\");\r\n          } finally {\r\n            setLoadingInitial(false);\r\n          }\r\n        } else {\r\n          setLoadingInitial(false);\r\n          console.warn(\"Provjera autentifikacije završena, ali token nije dostupan. Korisnik nije ulogovan/autorizovan.\");\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeDashboard();\r\n  }, [token, isAuthChecked]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('adminActiveTab', activeTab);\r\n  }, [activeTab]);\r\n\r\n  // Funkcija za dodavanje novog doktora\r\n  const handleAddDoctor = async (newDoctorData) => {\r\n        try {\r\n          // 1. Registracija korisnika u Auth servisu sa osnovnim podacima\r\n          const registerPayload = {\r\n            email: newDoctorData.email,\r\n            password: newDoctorData.password,\r\n            fullName: `${newDoctorData.ime} ${newDoctorData.prezime}`,\r\n            telefon: newDoctorData.telefon,\r\n            roles: [\"ROLE_DOKTOR\"],\r\n            grad: newDoctorData.grad,\r\n            specijalizacije: newDoctorData.specijalizacije,\r\n          };\r\n\r\n          const authResponse = await axios.post(`${AUTH_API_PREFIX}/register`, registerPayload);\r\n          // OBAVEZNO: Logirajte cijeli authResponse.data da vidite što se vraća!\r\n          console.log(\"Auth Service Register Response Data:\", authResponse.data);\r\n\r\n          // Promijenite ovu liniju na osnovu stvarne strukture odgovora Auth servisa\r\n          // Najvjerojatnije:\r\n          // const userId = authResponse.data.id;\r\n          // Ako je npr. { user: { id: \"some-uuid\" } }\r\n          const userId = authResponse.data.id || authResponse.data.user?.id || null;\r\n\r\n          if (!userId) {\r\n              throw new Error(\"Korisnički ID nije dobiven iz Auth servisa.\");\r\n          }\r\n\r\n          // 2. Slanje kompletnih detalja doktora servisu korisnici-doktori\r\n          const doctorDetailsPayload = {\r\n            userId: userId, // Povezivanje sa korisničkim nalogom\r\n            ime: newDoctorData.ime,\r\n            prezime: newDoctorData.prezime,\r\n            email: newDoctorData.email,\r\n            telefon: newDoctorData.telefon,\r\n            grad: newDoctorData.grad,\r\n            specijalizacije: newDoctorData.specijalizacije,\r\n            radnoVrijeme: newDoctorData.radnoVrijeme || '', // Default na prazan string\r\n            iskustvo: newDoctorData.iskustvo !== null && newDoctorData.iskustvo !== undefined ? newDoctorData.iskustvo : 0, // Default na 0\r\n            ocjena: 0.0, // Admin ne postavlja ocjenu, uvijek počinje s 0.0\r\n          };\r\n\r\n          // Poziv na korisnici-doktori servis za spašavanje detalja\r\n          await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/user-details/${userId}`, doctorDetailsPayload, authHeaders); // Ispravan endpoint\r\n\r\n          // Dodatno kašnjenje prije dohvaćanja da se osigura da je backend obradio event\r\n          setTimeout(() => {\r\n              fetchDoctors(); // Ponovo dohvati doktore da bi se prikazale promjene\r\n          }, 500);\r\n\r\n          setShowDoctorModal(false);\r\n          showNotification('Novi doktor uspješno registrovan i detalji sačuvani!', 'success');\r\n        } catch (error) {\r\n          console.error(\"Greška prilikom dodavanja doktora:\", error.response?.data || error.message);\r\n          showNotification(error.response?.data?.message || 'Greška prilikom dodavanja doktora.', \"danger\");\r\n        }\r\n      };\r\n\r\n      // Funkcija za ažuriranje postojećeg doktora\r\n       const handleUpdateDoctor = async (updatedDoctor) => {\r\n           try {\r\n             // Provjerite da li ID doktora postoji\r\n             if (!updatedDoctor.id) {\r\n                 showNotification('ID doktora nedostaje za ažuriranje.', 'danger');\r\n                 console.error('ID doktora nedostaje za ažuriranje:', updatedDoctor);\r\n                 return;\r\n             }\r\n\r\n             // Podaci za ažuriranje doktora u korisnici-doktori servisu\r\n             const doctorUpdatePayload = {\r\n               ime: updatedDoctor.ime,\r\n               prezime: updatedDoctor.prezime,\r\n               email: updatedDoctor.email,\r\n               telefon: updatedDoctor.telefon,\r\n               grad: updatedDoctor.grad,\r\n               specijalizacije: updatedDoctor.specijalizacije,\r\n               radnoVrijeme: updatedDoctor.radnoVrijeme || '', // Default na prazan string\r\n               iskustvo: updatedDoctor.iskustvo !== null && updatedDoctor.iskustvo !== undefined ? updatedDoctor.iskustvo : 0, // Default na 0\r\n               ocjena: updatedDoctor.ocjena || 0.0, // Ostavljamo postojeću ocjenu, ali osiguravamo default ako je null\r\n             };\r\n             // Ažuriranje detalja doktora u korisnici-doktori servisu (koristimo doktorID)\r\n             await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${updatedDoctor.id}`, doctorUpdatePayload, authHeaders);\r\n\r\n             // Podaci za ažuriranje korisničkog naloga u Auth servisu\r\n             const userUpdatePayload = {\r\n               email: updatedDoctor.email,\r\n               fullName: `${updatedDoctor.ime} ${updatedDoctor.prezime}`,\r\n               telefon: updatedDoctor.telefon,\r\n             };\r\n             // Ažuriraj korisnički nalog u Auth servisu ako postoji userId\r\n             if (updatedDoctor.userId) {\r\n                 await axios.put(`${AUTH_API_PREFIX}/users/${updatedDoctor.userId}`, userUpdatePayload, authHeaders);\r\n             } else {\r\n                 console.warn(\"Nije pronađen userId za ažuriranje korisnika u Auth servisu.\");\r\n             }\r\n\r\n             fetchDoctors(); // Ponovo dohvati doktore nakon ažuriranja\r\n             setShowDoctorModal(false);\r\n             setEditingDoctor(null);\r\n             showNotification('Doktor uspješno ažuriran!', 'success');\r\n           } catch (error) {\r\n             console.error(\"Greška prilikom ažuriranja doktora:\", error.response?.data || error.message);\r\n             showNotification(error.response?.data?.message || 'Greška prilikom ažuriranja doktora.', \"danger\");\r\n           }\r\n         };\r\n\r\n         // CUSTOM CONFIRMATION MODAL STATE AND FUNCTIONS\r\n         const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n         const [confirmAction, setConfirmAction] = useState(() => () => {}); // Pohranjuje funkciju koja se poziva pri potvrdi\r\n         const [confirmMessage, setConfirmMessage] = useState(\"\");\r\n         const [confirmTitle, setConfirmTitle] = useState(\"Potvrda\");\r\n\r\n         // Funkcija za prikaz prilagođenog modala za potvrdu\r\n         const showCustomConfirm = (message, action, title = \"Potvrda\") => {\r\n           setConfirmMessage(message);\r\n           setConfirmAction(() => action); // Koristi funkcionalno ažuriranje za pohranu akcije\r\n           setConfirmTitle(title);\r\n           setShowConfirmModal(true);\r\n         };\r\n\r\n         // Funkcija koja se poziva kada korisnik potvrdi akciju u modalu\r\n         const handleConfirmAction = () => {\r\n           confirmAction(); // Izvrši pohranjenu akciju\r\n           setShowConfirmModal(false);\r\n         };\r\n\r\n         // Funkcija za brisanje doktora (koristi custom confirm)\r\n         const handleDeleteDoctor = async (id) => {\r\n           showCustomConfirm(\r\n             'Jeste li sigurni da želite obrisati ovog doktora? Ovom akcijom će se obrisati i korisnički nalog.',\r\n             async () => {\r\n               try {\r\n                 const doctorToDelete = doctors.find(doc => doc.id === id);\r\n                 if (!doctorToDelete || !doctorToDelete.userId) {\r\n                   showNotification('Nije pronađen korisnički ID za brisanje doktora.', 'danger');\r\n                   return;\r\n                 }\r\n\r\n                 // Brisanje doktora iz korisnici-doktori servisa\r\n                 await axios.delete(`${KORISNICI_DOKTORI_API_PREFIX}/api/doktori/${id}`, authHeaders);\r\n                 // Brisanje korisnika iz Auth servisa\r\n                 await axios.delete(`${AUTH_API_PREFIX}/users/${doctorToDelete.userId}`, authHeaders);\r\n\r\n                 fetchDoctors(); // Ponovo dohvati doktore nakon brisanja\r\n                 showNotification('Doktor uspješno obrisan!', 'danger');\r\n               } catch (error) {\r\n                 console.error(\"Greška prilikom brisanja doktora:\", error.response?.data || error.message);\r\n                 showNotification(error.response?.data?.message || 'Greška prilikom brisanja doktora.', \"danger\");\r\n               }\r\n             },\r\n             \"Potvrdi brisanje doktora\"\r\n           );\r\n         };\r\n\r\n         // Otvaranje modala za doktora (dodavanje/uređivanje)\r\n         const openDoctorModal = (doctor = null) => {\r\n           setEditingDoctor(doctor);\r\n           setShowDoctorModal(true);\r\n         };\r\n\r\n         // Filtriranje i paginacija doktora\r\n         const filteredDoctors = doctors.filter(doctor =>\r\n           doctor.name.toLowerCase().includes(doctorSearchTerm.toLowerCase()) ||\r\n           doctor.specialty.toLowerCase().includes(doctorSearchTerm.toLowerCase()) ||\r\n           doctor.city.toLowerCase().includes(doctorSearchTerm.toLowerCase()) ||\r\n           (doctor.email && doctor.email.toLowerCase().includes(doctorSearchTerm.toLowerCase())) ||\r\n           (doctor.telefon && doctor.telefon.toLowerCase().includes(doctorSearchTerm.toLowerCase())) ||\r\n           (doctor.radnoVrijeme && doctor.radnoVrijeme.toLowerCase().includes(doctorSearchTerm.toLowerCase()))\r\n         );\r\n         const indexOfLastDoctor = doctorsCurrentPage * itemsPerPage;\r\n         const indexOfFirstDoctor = indexOfLastDoctor - itemsPerPage;\r\n         const currentDoctors = filteredDoctors.slice(indexOfFirstDoctor, indexOfLastDoctor);\r\n         const totalDoctorPages = Math.ceil(filteredDoctors.length / itemsPerPage);\r\n\r\n       // Funkcija za dodavanje novog pacijenta\r\n       const handleAddPatient = async (newPatient) => {\r\n         try {\r\n           console.log(\"handleAddPatient: Počinjem proces dodavanja pacijenta.\");\r\n           // 1. Registracija korisnika u Auth servisu\r\n           const registerPayload = {\r\n             email: newPatient.email,\r\n             password: newPatient.password, // Password se šalje ovdje\r\n             fullName: `${newPatient.ime} ${newPatient.prezime}`,\r\n             telefon: newPatient.telefon,\r\n             roles: [\"ROLE_PACIJENT\"], // Uvijek ROLE_PACIJENT za pacijenta\r\n             grad: null, // Pacijentima grad nije obavezan\r\n             specijalizacije: null, // Pacijenti nemaju specijalizacije\r\n           };\r\n           console.log(\"handleAddPatient: Slanje registerPayload-a Auth servisu:\", registerPayload);\r\n           const authResponse = await axios.post(`${AUTH_API_PREFIX}/register`, registerPayload);\r\n\r\n           // OBAVEZNO: Logirajte cijeli authResponse.data da vidite što se vraća!\r\n           console.log(\"Auth Service Register Response Data (for patient):\", authResponse.data);\r\n\r\n           const userId = authResponse.data.id || authResponse.data.user?.id || null;\r\n\r\n           if (!userId) {\r\n               throw new Error(\"Korisnički ID nije dobiven iz Auth servisa za pacijenta.\");\r\n           }\r\n\r\n           // KLJUČNA PROMJENA: Uklonjen redundantni axios.post poziv na korisnici-doktori servis.\r\n           // Očekujemo da UserRegisteredEvent, poslan od Auth servisa, kreira Pacijent entitet.\r\n           console.log(\"handleAddPatient: Preskačem slanje pacijent detalja na korisnici-doktori servis. Očekujem da UserRegisteredEvent to obradi.\");\r\n\r\n           // Zbog asinhronosti eventa, možda će biti minimalnog kašnjenja prije nego što se pacijent pojavi u tabeli.\r\n           // Bolje je osvježiti listu pacijenata nakon kratke pauze ili uzeti u obzir da je event uspješan.\r\n           // Za sada, samo osvježavamo odmah.\r\n           setTimeout(() => {\r\n               fetchPatients(); // Ponovo dohvati pacijente nakon dodavanja\r\n           }, 500); // Kratka pauza od 500ms\r\n\r\n           setShowPatientModal(false);\r\n           showNotification('Novi pacijent uspješno registrovan!', 'success');\r\n           console.log(\"handleAddPatient: Proces dodavanja pacijenta uspješno završen (registracija i event obrada).\");\r\n\r\n         } catch (error) {\r\n           console.error(\"Greška prilikom dodavanja pacijenta:\", error.response?.data || error.message);\r\n           // Prikazati poruku o grešci\r\n           showNotification(error.response?.data?.message || 'Greška prilikom dodavanja pacijenta. Molimo provjerite konzolu za više detalja.', \"danger\");\r\n         }\r\n       };\r\n\r\n\r\n  // Funkcija za ažuriranje postojećeg pacijenta (postojeća)\r\n  const handleUpdatePatient = async (updatedPatient) => {\r\n    try {\r\n      const patientUpdatePayload = {\r\n        ime: updatedPatient.ime,\r\n        prezime: updatedPatient.prezime,\r\n        email: updatedPatient.email,\r\n        telefon: updatedPatient.telefon,\r\n      };\r\n      await axios.put(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti/${updatedPatient.id}`, patientUpdatePayload, authHeaders);\r\n\r\n      const userUpdatePayload = {\r\n        email: updatedPatient.email,\r\n        fullName: `${updatedPatient.ime} ${updatedPatient.prezime}`,\r\n        telefon: updatedPatient.telefon,\r\n      };\r\n      if (updatedPatient.userId) {\r\n          await axios.put(`${AUTH_API_PREFIX}/users/${updatedPatient.userId}`, userUpdatePayload, authHeaders);\r\n      } else {\r\n          console.warn(\"Nije pronađen userId za ažuriranje korisnika u Auth servisu.\");\r\n      }\r\n\r\n      fetchPatients();\r\n      setShowPatientModal(false);\r\n      setEditingPatient(null);\r\n      showNotification('Pacijent uspješno ažuriran!', 'success');\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom ažuriranja pacijenta:\", error.response?.data || error.message);\r\n      showNotification(error.response?.data?.message || 'Greška prilikom ažuriranja pacijenta. Molimo provjerite konzolu za više detalja.', \"danger\");\r\n    }\r\n  };\r\n\r\n  // Funkcija za brisanje pacijenta (postojeća)\r\n  const handleDeletePatient = async (id) => {\r\n    showCustomConfirm(\r\n      'Jeste li sigurni da želite obrisati ovog pacijenta? Ovom akcijom će se obrisati i korisnički nalog.',\r\n      async () => {\r\n        try {\r\n          const patientToDelete = patients.find(pat => pat.id === id);\r\n          if (!patientToDelete || !patientToDelete.userId) {\r\n            showNotification('Nije pronađen korisnički ID za brisanje pacijenta.', 'danger');\r\n            return;\r\n          }\r\n\r\n          await axios.delete(`${KORISNICI_DOKTORI_API_PREFIX}/api/pacijenti/${id}`, authHeaders);\r\n          await axios.delete(`${AUTH_API_PREFIX}/users/${patientToDelete.userId}`, authHeaders);\r\n\r\n          fetchPatients();\r\n          showNotification('Pacijent uspješno obrisan!', 'success');\r\n        } catch (error) {\r\n          console.error(\"Greška prilikom brisanja pacijenta:\", error.response?.data || error.message);\r\n          showNotification(error.response?.data?.message || 'Greška prilikom brisanja pacijenta.', \"danger\");\r\n        }\r\n      },\r\n      \"Potvrdi brisanje pacijenta\"\r\n    );\r\n  };\r\n\r\n  // Otvaranje modala za pacijenta\r\n  const openPatientModal = (patient = null) => {\r\n    setEditingPatient(patient);\r\n    setShowPatientModal(true);\r\n  };\r\n\r\n  // Filtriranje i paginacija pacijenata\r\n  const filteredPatients = patients.filter(patient =>\r\n    patient.name.toLowerCase().includes(patientSearchTerm.toLowerCase()) ||\r\n    patient.email.toLowerCase().includes(patientSearchTerm.toLowerCase()) ||\r\n    (patient.phone && patient.phone.toLowerCase().includes(patientSearchTerm.toLowerCase()))\r\n  );\r\n  const indexOfLastPatient = patientsCurrentPage * itemsPerPage;\r\n  const indexOfFirstPatient = indexOfLastPatient - itemsPerPage;\r\n  const currentPatients = filteredPatients.slice(indexOfFirstPatient, indexOfLastPatient);\r\n  const totalPatientPages = Math.ceil(filteredPatients.length / itemsPerPage);\r\n\r\n\r\n  // --- Funkcije za Termine ---\r\n  const handleAddTerm = async (newTermData) => {\r\n    try {\r\n      const response = await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini`, newTermData, authHeaders);\r\n      showNotification('Novi termin uspješno dodan!', 'success');\r\n      fetchTerms();\r\n      setShowTermModal(false);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dodavanja termina:\", error.response?.data || error.message);\r\n      showNotification(error.response?.data?.message || 'Greška prilikom dodavanja termina.', \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleUpdateTerm = async (updatedTerm) => {\r\n    try {\r\n      // Datum i vrijeme trebaju biti stringovi u formatu YAPILANDI-MM-DD i HH:MM:SS\r\n      const termPayload = {\r\n        doktorID: updatedTerm.doktorID,\r\n        datum: updatedTerm.datum,\r\n        vrijeme: updatedTerm.vrijeme,\r\n        dostupnost: updatedTerm.dostupnost,\r\n      };\r\n      await axios.put(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${updatedTerm.id}`, termPayload, authHeaders);\r\n      showNotification('Termin uspješno ažuriran!', 'success');\r\n      fetchTerms();\r\n      setShowTermModal(false);\r\n      setEditingTerm(null);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom ažuriranja termina:\", error.response?.data || error.message);\r\n      showNotification(error.response?.data?.message || 'Greška prilikom ažuriranja termina.', \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteTerm = async (id) => {\r\n    showCustomConfirm(\r\n      'Jeste li sigurni da želite obrisati ovaj termin?',\r\n      async () => {\r\n        try {\r\n          await axios.delete(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${id}`, authHeaders);\r\n          showNotification('Termin uspješno obrisan!', 'success');\r\n          fetchTerms();\r\n        } catch (error) {\r\n          console.error(\"Greška prilikom brisanja termina:\", error.response?.data || error.message);\r\n          showNotification(error.response?.data?.message || 'Greška prilikom brisanja termina.', \"danger\");\r\n        }\r\n      },\r\n      \"Potvrdi brisanje termina\"\r\n    );\r\n  };\r\n\r\n  const openTermModal = (term = null) => {\r\n    // Ako uređujemo postojeći termin, želimo poslati boolean za dostupnost u modal\r\n    if (term) {\r\n        setEditingTerm({ ...term, doktorID: term.doktorID, dostupnost: term.dostupnost });\r\n    } else {\r\n        setEditingTerm(null); // Za novi termin, inicijaliziraj na null\r\n    }\r\n    setShowTermModal(true);\r\n  };\r\n\r\n  // Filtriranje i paginacija termina\r\n  const filteredTerms = terms.filter(term =>\r\n    (term.doktorID != null && term.doktorID.toString().toLowerCase().includes(termSearchTerm.toLowerCase())) ||\r\n    (term.datum && term.datum.toLowerCase().includes(termSearchTerm.toLowerCase())) ||\r\n    (term.vrijeme && term.vrijeme.toLowerCase().includes(termSearchTerm.toLowerCase())) ||\r\n    (term.dostupnost !== undefined && (term.dostupnost ? 'dostupan' : 'zauzet').includes(termSearchTerm.toLowerCase()))\r\n  );\r\n  const indexOfLastTerm = termsCurrentPage * itemsPerPage;\r\n  const indexOfFirstTerm = indexOfLastTerm - itemsPerPage;\r\n  const currentTerms = filteredTerms.slice(indexOfFirstTerm, indexOfLastTerm);\r\n  const totalTermPages = Math.ceil(filteredTerms.length / itemsPerPage);\r\n\r\n\r\n  // --- Funkcije za Preglede ---\r\n  const handleAddExamination = async (newExaminationData) => {\r\n    try {\r\n      const examinationPayload = {\r\n        pacijentID: newExaminationData.pacijentID,\r\n        doktorID: newExaminationData.doktorID,\r\n        termin: { terminID: newExaminationData.terminID },\r\n        datumPregleda: newExaminationData.datumPregleda,\r\n        vrijemePregleda: newExaminationData.vrijemePregleda,\r\n        status: newExaminationData.status,\r\n        komentarPacijenta: newExaminationData.komentarPacijenta,\r\n        ocjenaDoktora: newExaminationData.ocjenaDoktora,\r\n      };\r\n      console.log('handleAddExamination - Sending Payload:', examinationPayload);\r\n\r\n      const response = await axios.post(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi`, examinationPayload, authHeaders);\r\n      showNotification('Novi pregled uspješno dodan!', 'success');\r\n      fetchExaminations();\r\n      setShowExaminationModal(false);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom dodavanja pregleda:\", error.response?.data || error.message);\r\n      showNotification(error.response?.data?.message || 'Greška prilikom dodavanja pregleda.', \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleUpdateExamination = async (updatedExamination) => {\r\n    try {\r\n      // Backend očekuje datumPregleda i vrijemePregleda kao Stringove\r\n      const examinationPayload = {\r\n        pacijentID: updatedExamination.pacijentID,\r\n        doktorID: updatedExamination.doktorID,\r\n        termin: { terminID: updatedExamination.terminID },\r\n        datumPregleda: updatedExamination.datumPregleda, // Ispravno se šalje\r\n        vrijemePregleda: updatedExamination.vrijemePregleda, // Ispravno se šalje\r\n        status: updatedExamination.status,\r\n        komentarPacijenta: updatedExamination.komentarPacijenta,\r\n        ocjenaDoktora: updatedExamination.ocjenaDoktora,\r\n      };\r\n      console.log('handleUpdateExamination - Sending Payload:', examinationPayload);\r\n\r\n      await axios.put(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi/${updatedExamination.id}`, examinationPayload, authHeaders);\r\n      showNotification('Pregled uspješno ažuriran!', 'success');\r\n      fetchExaminations();\r\n      setShowExaminationModal(false);\r\n      setEditingExamination(null);\r\n    } catch (error) {\r\n      console.error(\"Greška prilikom ažuriranja pregleda:\", error.response?.data || error.message);\r\n      showNotification(error.response?.data?.message || 'Greška prilikom ažuriranja pregleda.', \"danger\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteExamination = async (id) => {\r\n    showCustomConfirm(\r\n      'Jeste li sigurni da želite obrisati ovaj pregled?',\r\n      async () => {\r\n        try {\r\n          await axios.delete(`${TERMINI_PREGLEDI_API_PREFIX}/api/pregledi/${id}`, authHeaders);\r\n          showNotification('Pregled uspješno obrisan!', 'success');\r\n          fetchExaminations();\r\n        } catch (error) {\r\n          console.error(\"Greška prilikom brisanja pregleda:\", error.response?.data || error.message);\r\n          showNotification(error.response?.data?.message || 'Greška prilikom brisanja pregleda.', \"danger\");\r\n        }\r\n      },\r\n      \"Potvrdi brisanje pregleda\"\r\n    );\r\n  };\r\n\r\n  const openExaminationModal = (examination = null) => {\r\n    // Osiguraj da se pacijentID, doktorID i terminID pravilno prenesu u editingExamination za DataModal\r\n    if (examination) {\r\n        setEditingExamination({\r\n            ...examination,\r\n            pacijentID: examination.pacijentID,\r\n            doktorID: examination.doktorID,\r\n            terminID: examination.terminID,\r\n            datumPregleda: examination.datumPregleda, // Dodano za konzistentnost\r\n            vrijemePregleda: examination.vrijemePregleda // Dodano za konzistentnost\r\n        });\r\n    } else {\r\n        setEditingExamination(null); // Za novi pregled, inicijaliziraj na null\r\n    }\r\n    setShowExaminationModal(true);\r\n  };\r\n\r\n  // Paginacija pregleda\r\n  const filteredExaminations = examinations.filter(exam =>\r\n    (exam.patientName && exam.patientName.toLowerCase().includes(examinationSearchTerm.toLowerCase())) ||\r\n    (exam.doctorName && exam.doctorName.toLowerCase().includes(examinationSearchTerm.toLowerCase())) ||\r\n    (exam.status && exam.status.toLowerCase().includes(examinationSearchTerm.toLowerCase())) ||\r\n    (exam.datumPregleda && exam.datumPregleda.toLowerCase().includes(examinationSearchTerm.toLowerCase())) || // PROMIJENJENO\r\n    (exam.vrijemePregleda && exam.vrijemePregleda.toLowerCase().includes(examinationSearchTerm.toLowerCase())) // PROMIJENJENO\r\n  );\r\n  const indexOfLastExamination = examinationsCurrentPage * itemsPerPage;\r\n  const indexOfFirstExamination = indexOfLastExamination - itemsPerPage;\r\n  const currentExaminations = filteredExaminations.slice(indexOfFirstExamination, indexOfLastExamination);\r\n  const totalExaminationPages = Math.ceil(filteredExaminations.length / itemsPerPage);\r\n\r\n\r\n  // Komponenta za modal za unos/uređivanje podataka (Doktor/Pacijent/Termin/Pregled)\r\n  // Dodan `authHeaders` kao prop\r\n  const DataModal = ({ show, onClose, data, onSave, fields, title, idPrefix, authHeaders }) => {\r\n    // Inicijalizacija formData s defaultnim vrijednostima ili postojećim podacima\r\n    const [formData, setFormData] = useState(() => {\r\n        const initialData = data ? { ...data } : {};\r\n        fields.forEach(field => {\r\n            if (data && data[field.name] !== undefined && data[field.name] !== null) {\r\n                let value = data[field.name];\r\n                if (field.type === 'date' && typeof value === 'string' && value.includes('T')) {\r\n                    value = value.split('T')[0]; // Formatiraj ISO string datum\r\n                } else if (field.type === 'time' && typeof value === 'string' && value.length > 8) {\r\n                    value = value.substring(0, 8); // Formatiraj vrijeme (HH:MM:SS)\r\n                } else if (field.name === 'specijalizacije' && Array.isArray(value)) {\r\n                    value = value[0] || ''; // Za select, uzmi prvu specijalizaciju ili prazno\r\n                } else if (field.type === 'checkbox') {\r\n                    value = Boolean(value); // Pretvaranje u boolean za checkbox\r\n                } else if (field.type === 'number' && (value === 0 || value === 0.0)) {\r\n                    value = ''; // Prikazati 0 ili 0.0 kao prazan string u inputu za broj\r\n                }\r\n                initialData[field.name] = value;\r\n            } else {\r\n                // Defaultne vrijednosti za novi unos (ako polje nije prisutno u 'data')\r\n                if (field.name === 'specijalizacije') {\r\n                    initialData[field.name] = ''; // Prazan string za select\r\n                } else if (field.type === 'number') {\r\n                    initialData[field.name] = ''; // Prazan string za brojčane inpute\r\n                } else if (field.type === 'checkbox') {\r\n                    initialData[field.name] = false; // False za checkbox\r\n                } else {\r\n                    initialData[field.name] = ''; // Prazan string za ostale\r\n                }\r\n            }\r\n        });\r\n        return initialData;\r\n    });\r\n\r\n    useEffect(() => {\r\n      const initialData = data ? { ...data } : {};\r\n        fields.forEach(field => {\r\n            if (data && data[field.name] !== undefined && data[field.name] !== null) {\r\n                let value = data[field.name];\r\n                if (field.type === 'date' && typeof value === 'string' && value.includes('T')) {\r\n                    value = value.split('T')[0];\r\n                } else if (field.type === 'time' && typeof value === 'string' && value.length > 8) {\r\n                    value = value.substring(0, 8);\r\n                } else if (field.name === 'specijalizacije' && Array.isArray(value)) {\r\n                    value = value[0] || '';\r\n                } else if (field.type === 'checkbox') {\r\n                    value = Boolean(value);\r\n                } else if (field.type === 'number' && (value === 0 || value === 0.0)) {\r\n                    value = ''; // Prikazati 0 ili 0.0 kao prazan string u inputu za broj\r\n                }\r\n                initialData[field.name] = value;\r\n            } else {\r\n                if (field.name === 'specijalizacije') {\r\n                    initialData[field.name] = '';\r\n                } else if (field.type === 'number') {\r\n                    initialData[field.name] = '';\r\n                } else if (field.type === 'checkbox') {\r\n                    initialData[field.name] = false;\r\n                } else {\r\n                    initialData[field.name] = '';\r\n                }\r\n            }\r\n        });\r\n        setFormData(initialData);\r\n\r\n    }, [data, fields, idPrefix]);\r\n\r\n    // NEW useEffect: Fetch Termin details when terminID changes for examinations\r\n    useEffect(() => {\r\n        if (idPrefix === 'examination' && formData.terminID) {\r\n            const fetchTermDetails = async () => {\r\n                try {\r\n                    const response = await axios.get(`${TERMINI_PREGLEDI_API_PREFIX}/api/termini/${formData.terminID}`, authHeaders);\r\n                    const fetchedTerm = response.data;\r\n                    setFormData(prev => ({\r\n                        ...prev,\r\n                        doktorID: fetchedTerm.doktorID, // Set doktorID from fetched term\r\n                        datumPregleda: fetchedTerm.datum, // Auto-fill date\r\n                        vrijemePregleda: fetchedTerm.vrijeme.substring(0, 8), // Auto-fill time (HH:MM:SS)\r\n                    }));\r\n                    showNotification('Detalji termina uspješno popunjeni!', 'info');\r\n                } catch (error) {\r\n                    console.error(\"Greška prilikom dohvaćanja detalja termina:\", error.response?.data || error.message);\r\n                    showNotification('Greška prilikom dohvaćanja detalja termina. Provjerite Term ID.', 'danger');\r\n                    // Optionally clear related fields if term lookup fails\r\n                    setFormData(prev => ({\r\n                        ...prev,\r\n                        doktorID: '',\r\n                        datumPregleda: '',\r\n                        vrijemePregleda: '',\r\n                    }));\r\n                }\r\n            };\r\n            fetchTermDetails();\r\n        }\r\n    }, [formData.terminID, idPrefix, authHeaders]);\r\n\r\n\r\n    const handleChange = (e) => {\r\n      const { name, value, type, checked } = e.target;\r\n      setFormData(prev => {\r\n        let newValue = value;\r\n\r\n        if (name === 'specijalizacije') {\r\n            // Ako je select, uvijek uzmi vrijednost kao string\r\n            newValue = value;\r\n        } else if (type === 'number') {\r\n            // Konvertiraj u broj. Ako je prazan string, postavi na 0.\r\n            newValue = value === '' ? 0 : Number(value); // Postavljamo na 0 umjesto null\r\n            if (isNaN(newValue)) {\r\n                newValue = 0; // Ako nije validan broj, postavi na 0\r\n            }\r\n        } else if (type === 'checkbox') {\r\n            newValue = checked;\r\n        }\r\n\r\n        return { ...prev, [name]: newValue };\r\n      });\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      const finalFormData = { ...formData };\r\n\r\n      // Specijalizacije: pretvori string u niz\r\n      if (idPrefix === 'doctor' && typeof finalFormData.specijalizacije === 'string') {\r\n          finalFormData.specijalizacije = finalFormData.specijalizacije ? [finalFormData.specijalizacije] : [];\r\n      }\r\n\r\n      // Osiguraj da 'iskustvo' i 'ocjena' budu brojevi (0 ili stvarna vrijednost), ne null/prazan string\r\n      if (finalFormData.iskustvo === null || finalFormData.iskustvo === '') {\r\n          finalFormData.iskustvo = 0;\r\n      }\r\n      if (finalFormData.ocjena === null || finalFormData.ocjena === '') {\r\n          finalFormData.ocjena = 0.0;\r\n      }\r\n\r\n      // Formatiranje vremena za termine i preglede (vrijemePregleda)\r\n      // Provjerava da li je u pitanju termin ili pregled i da li polje 'vrijeme' ili 'vrijemePregleda' postoji.\r\n      if (idPrefix === 'term' && finalFormData.vrijeme) {\r\n          // Ako je format HH:MM, dodaj :00\r\n          if (finalFormData.vrijeme.length === 5) {\r\n              finalFormData.vrijeme += ':00';\r\n          }\r\n      } else if (idPrefix === 'examination' && finalFormData.vrijemePregleda) {\r\n          // Ako je format HH:MM, dodaj :00\r\n          if (finalFormData.vrijemePregleda.length === 5) {\r\n              finalFormData.vrijemePregleda += ':00';\r\n          }\r\n      }\r\n\r\n      console.log('DataModal submitting:', finalFormData);\r\n\r\n      onSave(finalFormData);\r\n    };\r\n\r\n    return (\r\n      <Modal show={show} onHide={onClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Modal.Body>\r\n            {fields.map(field => (\r\n              <Form.Group className=\"mb-3\" controlId={`${idPrefix}-${field.name}`} key={field.name}>\r\n                <Form.Label>{field.label}</Form.Label>\r\n                {field.type === 'select' ? (\r\n                  <Form.Select\r\n                    name={field.name}\r\n                    value={formData[field.name] || ''} // Postavi value na prazan string ako je null/undefined\r\n                    onChange={handleChange}\r\n                    required={field.required}\r\n                  >\r\n                    <option value=\"\">Select {field.label}</option>\r\n                    {field.options.map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </Form.Select>\r\n                ) : field.type === 'textarea' ? (\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    name={field.name}\r\n                    value={formData[field.name] || ''}\r\n                    onChange={handleChange}\r\n                    required={field.required}\r\n                  />\r\n                ) : field.type === 'checkbox' ? (\r\n                    <Form.Check\r\n                        type=\"checkbox\"\r\n                        name={field.name}\r\n                        checked={formData[field.name] || false} // checked state for checkbox\r\n                        onChange={handleChange}\r\n                        label={field.label}\r\n                    />\r\n                ) : (\r\n                  <Form.Control\r\n                    type={field.type || 'text'}\r\n                    name={field.name}\r\n                    // Prikazuje prazan string ako je vrijednost null, undefined, 0 (za number), 'N/A'\r\n                    value={(formData[field.name] === null || formData[field.name] === undefined || formData[field.name] === 'N/A' || (field.type === 'number' && (formData[field.name] === 0 || formData[field.name] === 0.0))) ? '' : formData[field.name]}\r\n                    onChange={handleChange}\r\n                    required={field.required}\r\n                    readOnly={field.readOnly || (idPrefix === 'examination' && (field.name === 'doktorID' || field.name === 'datumPregleda' || field.name === 'vrijemePregleda'))} // Doktor ID, Datum i Vrijeme su ReadOnly ako su za pregled\r\n                  />\r\n                )}\r\n              </Form.Group>\r\n            ))}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={onClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Save changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  };\r\n\r\n  // Komponenta za paginaciju (postojeća)\r\n  const Pagination = ({ itemsPerPage, totalItems, currentPage, paginate }) => {\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n      <nav>\r\n        <ul className=\"pagination justify-content-center mt-4\">\r\n          {pageNumbers.map(number => (\r\n            <li key={number} className={`page-item ${currentPage === number ? 'active' : ''}`}>\r\n              <button onClick={() => paginate(number)} className=\"page-link\">\r\n                {number}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };\r\n\r\n  // Funkcija za renderovanje sadržaja na osnovu aktivnog taba\r\n  const renderContent = () => {\r\n    // Ažurirana polja za dodavanje/uređivanje doktora\r\n    const addDoctorFields = [\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'password', label: 'Password', type: 'password', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n      { name: 'grad', label: 'City', type: 'select', required: true, options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać'] },\r\n      { name: 'specijalizacije', label: 'Specialty', type: 'select', required: true, options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar'] },\r\n      { name: 'radnoVrijeme', label: 'Work Hours', type: 'text', required: false },\r\n      { name: 'iskustvo', label: 'Experience (years)', type: 'number', required: false },\r\n      // Uklonjeno: ocjena, jer se ona izračunava automatski\r\n    ];\r\n\r\n    const editDoctorFields = [\r\n      { name: 'id', label: 'Doctor ID', type: 'text', readOnly: true }, // Dodano: ID polje za prikaz kod editovanja\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n      { name: 'grad', label: 'City', type: 'select', required: true, options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać'] },\r\n      { name: 'specijalizacije', label: 'Specialty', type: 'select', required: true, options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar'] },\r\n      { name: 'radnoVrijeme', label: 'Work Hours', type: 'text', required: false },\r\n      { name: 'iskustvo', label: 'Experience (years)', type: 'number', required: false },\r\n      // Uklonjeno: ocjena\r\n    ];\r\n\r\n    const addPatientFields = [\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'password', label: 'Password', type: 'password', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n    ];\r\n\r\n    const editPatientFields = [\r\n      { name: 'id', label: 'Patient ID', type: 'text', readOnly: true }, // Dodano: ID polje za prikaz kod editovanja\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n    ];\r\n\r\n    // Polja za Termine\r\n    const addTermFields = [\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true },\r\n      { name: 'datum', label: 'Date (YYYY-MM-DD)', type: 'date', required: true },\r\n      { name: 'vrijeme', label: 'Time (HH:MM:SS)', type: 'time', required: true },\r\n      { name: 'dostupnost', label: 'Available', type: 'checkbox', required: false },\r\n    ];\r\n\r\n    const editTermFields = [\r\n      { name: 'id', label: 'Term ID (Auto)', type: 'text', required: false, readOnly: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true },\r\n      { name: 'datum', label: 'Date (YYYY-MM-DD)', type: 'date', required: true },\r\n      { name: 'vrijeme', label: 'Time (HH:MM:SS)', type: 'time', required: true },\r\n      { name: 'dostupnost', label: 'Available', type: 'checkbox', required: false },\r\n    ];\r\n\r\n    // Polja za Preglede\r\n    const addExaminationFields = [\r\n      { name: 'pacijentID', label: 'Patient ID', type: 'number', required: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'terminID', label: 'Term ID', type: 'number', required: true },\r\n      { name: 'datumPregleda', label: 'Date of Examination (YYYY-MM-DD)', type: 'date', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'vrijemePregleda', label: 'Time of Examination (HH:MM:SS)', type: 'time', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'status', label: 'Status', type: 'select', required: true, options: ['zakazan', 'obavljen', 'otkazan'] },\r\n      { name: 'komentarPacijenta', label: 'Patient Comment', type: 'textarea', required: false },\r\n      { name: 'ocjenaDoktora', label: 'Doctor Rating (0.0-5.0)', type: 'number', required: false },\r\n    ];\r\n\r\n    const editExaminationFields = [\r\n      { name: 'id', label: 'Examination ID (Auto)', type: 'text', readOnly: true },\r\n      { name: 'pacijentID', label: 'Patient ID', type: 'number', required: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'terminID', label: 'Term ID', type: 'number', required: true },\r\n      { name: 'datumPregleda', label: 'Date of Examination (YYYY-MM-DD)', type: 'date', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'vrijemePregleda', label: 'Time of Examination (HH:MM:SS)', type: 'time', required: true, readOnly: true }, // Postavljeno na readOnly\r\n      { name: 'status', label: 'Status', type: 'select', required: true, options: ['zakazan', 'obavljen', 'otkazan'] },\r\n      { name: 'komentarPacijenta', label: 'Patient Comment', type: 'textarea', required: false },\r\n      { name: 'ocjenaDoktora', label: 'Doctor Rating (0.0-5.0)', type: 'number', required: false },\r\n    ];\r\n\r\n\r\n    switch (activeTab) {\r\n      case 'overview':\r\n        return (\r\n          <div>\r\n            <h4 className=\"mb-4\">Dashboard Overview</h4>\r\n            <div className=\"row g-4\">\r\n              <div className=\"col-md-3\">\r\n                <div className=\"card text-white bg-primary mb-3\">\r\n                  <div className=\"card-header\">Total Doctors</div>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title display-4\">{doctors.length}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"card text-white bg-success mb-3\">\r\n                  <div className=\"card-header\">Total Patients</div>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title display-4\">{patients.length}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"card text-white bg-info mb-3\">\r\n                  <div className=\"card-header\">Available Terms</div>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title display-4\">{terms.filter(t => t.dostupnost === true).length}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"card text-white bg-warning mb-3\">\r\n                  <div className=\"card-header\">Pending Examinations</div>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title display-4\">{examinations.filter(exam => exam.status === 'zakazan').length}</h5>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-5\">\r\n              <h5>Quick Actions</h5>\r\n              <div className=\"d-flex gap-2 flex-wrap\">\r\n                <button className=\"btn btn-outline-primary\" onClick={() => openDoctorModal()}>Add New Doctor</button>\r\n                <button className=\"btn btn-outline-success\" onClick={() => openPatientModal()}>Add New Patient</button>\r\n                <button className=\"btn btn-outline-info\" onClick={() => openTermModal()}>Add New Term</button>\r\n                <button className=\"btn btn-outline-warning\" onClick={() => openExaminationModal()}>Add New Examination</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      case 'doctors':\r\n        return (\r\n          <div>\r\n            <h4 className=\"mb-4\">Manage Doctors</h4>\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <button className=\"btn btn-success\" onClick={() => openDoctorModal()}>Add New Doctor</button>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-25\"\r\n                placeholder=\"Search doctors...\"\r\n                value={doctorSearchTerm}\r\n                onChange={(e) => setDoctorSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Specialty</th>\r\n                    <th>City</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Work Hours</th>\r\n                    <th>Experience</th>\r\n                    <th>Rating</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentDoctors.length > 0 ? (\r\n                    currentDoctors.map(doctor => (\r\n                      <tr key={doctor.id}>\r\n                        <td>{doctor.id}</td>\r\n                        <td>{doctor.name}</td>\r\n                        <td>{doctor.specialty}</td>\r\n                        <td>{doctor.city}</td>\r\n                        <td>{doctor.email}</td>\r\n                        <td>{doctor.telefon}</td>\r\n                        <td>{doctor.radnoVrijeme}</td>\r\n                        <td>{doctor.iskustvo}</td>\r\n                        <td>{doctor.ocjena}</td>\r\n                        <td>\r\n                          <button className=\"btn btn-info btn-sm me-2\" onClick={() => openDoctorModal(doctor)}>Edit</button>\r\n                          <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteDoctor(doctor.id)}>Delete</button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td colSpan=\"10\" className=\"text-center\">No doctors found.</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <Pagination\r\n              itemsPerPage={itemsPerPage}\r\n              totalItems={filteredDoctors.length}\r\n              currentPage={doctorsCurrentPage}\r\n              paginate={setDoctorsCurrentPage}\r\n            />\r\n          </div>\r\n        );\r\n      case 'patients':\r\n        return (\r\n          <div>\r\n            <h4 className=\"mb-4\">Manage Patients</h4>\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <button className=\"btn btn-success\" onClick={() => openPatientModal()}>Add New Patient</button>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-25\"\r\n                placeholder=\"Search patients...\"\r\n                value={patientSearchTerm}\r\n                onChange={(e) => setPatientSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentPatients.length > 0 ? (\r\n                    currentPatients.map(patient => (\r\n                      <tr key={patient.id}>\r\n                        <td>{patient.id}</td>\r\n                        <td>{patient.name}</td>\r\n                        <td>{patient.email}</td>\r\n                        <td>{patient.phone}</td>\r\n                        <td>\r\n                          <button className=\"btn btn-info btn-sm me-2\" onClick={() => openPatientModal(patient)}>Edit</button>\r\n                          <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeletePatient(patient.id)}>Delete</button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td colSpan=\"5\" className=\"text-center\">No patients found.</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <Pagination\r\n              itemsPerPage={itemsPerPage}\r\n              totalItems={filteredPatients.length}\r\n              currentPage={patientsCurrentPage}\r\n              paginate={setPatientsCurrentPage}\r\n            />\r\n          </div>\r\n        );\r\n      case 'terms': // Novi tab za termine\r\n        return (\r\n          <div>\r\n            <h4 className=\"mb-4\">Manage Terms</h4>\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <button className=\"btn btn-success\" onClick={() => openTermModal()}>Add New Term</button>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-25\"\r\n                placeholder=\"Search terms...\"\r\n                value={termSearchTerm}\r\n                onChange={(e) => setTermSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Doctor ID</th>\r\n                    <th>Date</th>\r\n                    <th>Time</th>\r\n                    <th>Available</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentTerms.length > 0 ? (\r\n                    currentTerms.map(term => (\r\n                      <tr key={term.id}>\r\n                        <td>{term.id}</td>\r\n                        <td>{term.doktorID}</td>\r\n                        <td>{term.datum}</td>\r\n                        <td>{term.vrijeme}</td>\r\n                        <td>{term.dostupnost ? 'Dostupan' : 'Zauzet'}</td>\r\n                        <td>\r\n                          <button className=\"btn btn-info btn-sm me-2\" onClick={() => openTermModal(term)}>Edit</button>\r\n                          <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteTerm(term.id)}>Delete</button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td colSpan=\"6\" className=\"text-center\">No terms found.</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <Pagination\r\n              itemsPerPage={itemsPerPage}\r\n              totalItems={filteredTerms.length}\r\n              currentPage={termsCurrentPage}\r\n              paginate={setTermsCurrentPage}\r\n            />\r\n          </div>\r\n        );\r\n      case 'examinations': // Novi tab za preglede (prethodno appointments)\r\n        return (\r\n          <div>\r\n            <h4 className=\"mb-4\">Manage Examinations</h4>\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <button className=\"btn btn-success\" onClick={() => openExaminationModal()}>Add New Examination</button>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control w-25\"\r\n                placeholder=\"Search examinations...\"\r\n                value={examinationSearchTerm}\r\n                onChange={(e) => setExaminationSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Patient</th>\r\n                    <th>Doctor</th>\r\n                    <th>Term ID</th>\r\n                    <th>Date</th>\r\n                    <th>Time</th>\r\n                    <th>Status</th>\r\n                    <th>Patient Comment</th>\r\n                    <th>Doctor Rating</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentExaminations.length > 0 ? (\r\n                    currentExaminations.map(examination => (\r\n                      <tr key={examination.id}>\r\n                        <td>{examination.id}</td>\r\n                        <td>{examination.patientName}</td>\r\n                        <td>{examination.doctorName}</td>\r\n                        <td>{examination.terminID}</td>\r\n                        <td>{examination.datumPregleda}</td> {/* PROMIJENJENO */}\r\n                        <td>{examination.vrijemePregleda}</td> {/* PROMIJENJENO */}\r\n                        <td>\r\n                          <select\r\n                            className=\"form-select\"\r\n                            value={examination.status}\r\n                            onChange={(e) => handleUpdateExamination(\r\n                                {\r\n                                  ...examination,\r\n                                  status: e.target.value,\r\n                                  datumPregleda: examination.datumPregleda, // Explicitno dodaj datum\r\n                                  vrijemePregleda: examination.vrijemePregleda // Explicitno dodaj vrijeme\r\n                                }\r\n                            )}\r\n                          >\r\n                            <option value=\"zakazan\">Zakazan</option>\r\n                            <option value=\"obavljen\">Obavljen</option>\r\n                            <option value=\"otkazan\">Otkazan</option>\r\n                          </select>\r\n                        </td>\r\n                        <td>{examination.komentarPacijenta}</td>\r\n                        <td>{examination.ocjenaDoktora}</td>\r\n                        <td>\r\n                          <button className=\"btn btn-info btn-sm me-2\" onClick={() => openExaminationModal(examination)}>Edit</button>\r\n                          <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteExamination(examination.id)}>Delete</button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  ) : (\r\n                    <tr>\r\n                      <td colSpan=\"10\" className=\"text-center\">No examinations found.</td>\r\n                    </tr>\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <Pagination\r\n              itemsPerPage={itemsPerPage}\r\n              totalItems={filteredExaminations.length}\r\n              currentPage={examinationsCurrentPage}\r\n              paginate={setExaminationsCurrentPage}\r\n            />\r\n          </div>\r\n        );\r\n      default:\r\n        return <p>Select a tab to view content.</p>;\r\n    }\r\n  };\r\n\r\n  // Definisanje polja za dodavanje/uređivanje doktora\r\n  const addDoctorFields = [\r\n    { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n    { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n    { name: 'email', label: 'Email', type: 'email', required: true },\r\n    { name: 'password', label: 'Password', type: 'password', required: true },\r\n    { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n    { name: 'grad', label: 'City', type: 'select', required: true, options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać'] },\r\n    { name: 'specijalizacije', label: 'Specialty', type: 'select', required: true, options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar'] },\r\n    { name: 'radnoVrijeme', label: 'Work Hours', type: 'text', required: false },\r\n    { name: 'iskustvo', label: 'Experience (years)', type: 'number', required: false },\r\n    // Uklonjeno: ocjena, jer se ona izračunava automatski\r\n  ];\r\n\r\n    const editDoctorFields = [\r\n      { name: 'id', label: 'Doctor ID', type: 'text', readOnly: true }, // Dodano: ID polje za prikaz kod editovanja\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n      { name: 'grad', label: 'City', type: 'select', required: true, options: ['Sarajevo', 'Mostar', 'Zenica', 'Banja Luka', 'Tuzla', 'Bihać'] },\r\n      { name: 'specijalizacije', label: 'Specialty', type: 'select', required: true, options: ['Kardiolog', 'Neurolog', 'Ortoped', 'Pedijatar', 'Hirurg', 'Dermatolog', 'Oftamolog', 'Psihijatar'] },\r\n      { name: 'radnoVrijeme', label: 'Work Hours', type: 'text', required: false },\r\n      { name: 'iskustvo', label: 'Experience (years)', type: 'number', required: false },\r\n      // Uklonjeno: ocjena\r\n    ];\r\n\r\n    const addPatientFields = [\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'password', label: 'Password', type: 'password', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n    ];\r\n\r\n    const editPatientFields = [\r\n      { name: 'id', label: 'Patient ID', type: 'text', readOnly: true }, // Dodano: ID polje za prikaz kod editovanja\r\n      { name: 'ime', label: 'First Name', type: 'text', required: true },\r\n      { name: 'prezime', label: 'Last Name', type: 'text', required: true },\r\n      { name: 'email', label: 'Email', type: 'email', required: true },\r\n      { name: 'telefon', label: 'Phone', type: 'text', required: false },\r\n    ];\r\n\r\n    // Polja za Termine\r\n    const addTermFields = [\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true },\r\n      { name: 'datum', label: 'Date (YYYY-MM-DD)', type: 'date', required: true },\r\n      { name: 'vrijeme', label: 'Time (HH:MM:SS)', type: 'time', required: true },\r\n      { name: 'dostupnost', label: 'Available', type: 'checkbox', required: false },\r\n    ];\r\n\r\n    const editTermFields = [\r\n      { name: 'id', label: 'Term ID (Auto)', type: 'text', required: false, readOnly: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true },\r\n      { name: 'datum', label: 'Date (YYYY-MM-DD)', type: 'date', required: true },\r\n      { name: 'vrijeme', label: 'Time (HH:MM:SS)', type: 'time', required: true },\r\n      { name: 'dostupnost', label: 'Available', type: 'checkbox', required: false },\r\n    ];\r\n\r\n    // Polja za Preglede\r\n    const addExaminationFields = [\r\n      { name: 'pacijentID', label: 'Patient ID', type: 'number', required: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true, readOnly: true },\r\n      { name: 'terminID', label: 'Term ID', type: 'number', required: true },\r\n      { name: 'datumPregleda', label: 'Date of Examination (YYYY-MM-DD)', type: 'date', required: true, readOnly: true },\r\n      { name: 'vrijemePregleda', label: 'Time of Examination (HH:MM:SS)', type: 'time', required: true, readOnly: true },\r\n      { name: 'status', label: 'Status', type: 'select', required: true, options: ['zakazan', 'obavljen', 'otkazan'] },\r\n      { name: 'komentarPacijenta', label: 'Patient Comment', type: 'textarea', required: false },\r\n      { name: 'ocjenaDoktora', label: 'Doctor Rating (0.0-5.0)', type: 'number', required: false },\r\n    ];\r\n\r\n    const editExaminationFields = [\r\n      { name: 'id', label: 'Examination ID (Auto)', type: 'text', readOnly: true },\r\n      { name: 'pacijentID', label: 'Patient ID', type: 'number', required: true },\r\n      { name: 'doktorID', label: 'Doctor ID', type: 'number', required: true, readOnly: true },\r\n      { name: 'terminID', label: 'Term ID', type: 'number', required: true },\r\n      { name: 'datumPregleda', label: 'Date of Examination (YYYY-MM-DD)', type: 'date', required: true, readOnly: true },\r\n      { name: 'vrijemePregleda', label: 'Time of Examination (HH:MM:SS)', type: 'time', required: true, readOnly: true },\r\n      { name: 'status', label: 'Status', type: 'select', required: true, options: ['zakazan', 'obavljen', 'otkazan'] },\r\n      { name: 'komentarPacijenta', label: 'Patient Comment', type: 'textarea', required: false },\r\n      { name: 'ocjenaDoktora', label: 'Doctor Rating (0.0-5.0)', type: 'number', required: false },\r\n    ];\r\n\r\n\r\n  // Prikazuje spinner za učitavanje ako je `loadingInitial` true\r\n  if (loadingInitial) {\r\n    return (\r\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '100vh' }}>\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n          <span className=\"visually-hidden\">Učitavanje administratorskog panela...</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Ako je `loadingInitial` false, a `token` je null (što znači da AuthContext kaže da nismo ulogovani)\r\n  // i provjera autentifikacije je završena, prikaži poruku o odbijenom pristupu.\r\n  if (!loadingInitial && !token && isAuthChecked) {\r\n    return (\r\n      <div className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '100vh' }}>\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-danger\">Pristup odbijen</h2>\r\n          <p className=\"lead\">Niste autorizovani za pristup ovoj stranici. Molimo prijavite se kao administrator.</p>\r\n          {/* Opcionalno, možete dodati Link ka stranici za prijavu, npr: */}\r\n          {/* <Link to=\"/login\" className=\"btn btn-primary mt-3\">Prijavi se</Link> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* Alert notifikacija */}\r\n      {showAlert && (\r\n        <Alert variant={alertType} onClose={() => setShowAlert(false)} dismissible className=\"position-fixed top-0 start-50 translate-middle-x mt-3\" style={{ zIndex: 1050 }}>\r\n          {alertMessage}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Prilagođeni Modal za potvrdu (zamjena za window.confirm) */}\r\n      <Modal show={showConfirmModal} onHide={() => setShowConfirmModal(false)} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{confirmTitle}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {confirmMessage}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirmModal(false)}>\r\n            Poništi\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleConfirmAction}>\r\n            Potvrdi\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <div className=\"row\">\r\n        {/* Sidebar navigacija */}\r\n        <nav className=\"col-md-3 col-lg-2 d-md-block bg-light sidebar collapse\" style={{ minHeight: '100vh' }}>\r\n          <div className=\"position-sticky pt-3\">\r\n            <ul className=\"nav flex-column\">\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link ${activeTab === 'overview' ? 'active' : ''}`} href=\"#\" onClick={() => setActiveTab('overview')}>\r\n                  Overview\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link ${activeTab === 'doctors' ? 'active' : ''}`} href=\"#\" onClick={() => setActiveTab('doctors')}>\r\n                  Doctors\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link ${activeTab === 'patients' ? 'active' : ''}`} href=\"#\" onClick={() => setActiveTab('patients')}>\r\n                  Patients\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link ${activeTab === 'terms' ? 'active' : ''}`} href=\"#\" onClick={() => setActiveTab('terms')}>\r\n                  Terms\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link ${activeTab === 'examinations' ? 'active' : ''}`} href=\"#\" onClick={() => setActiveTab('examinations')}>\r\n                  Examinations\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n\r\n        {/* Glavni sadržaj panela */}\r\n        <main className=\"col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4\">\r\n          {renderContent()}\r\n        </main>\r\n      </div>\r\n\r\n      {/* Modal za dodavanje/uređivanje doktora */}\r\n      <DataModal\r\n        show={showDoctorModal}\r\n        onClose={() => setShowDoctorModal(false)}\r\n        data={editingDoctor}\r\n        onSave={editingDoctor ? handleUpdateDoctor : handleAddDoctor}\r\n        title={editingDoctor ? 'Edit Doctor' : 'Add New Doctor'}\r\n        idPrefix=\"doctor\"\r\n        fields={editingDoctor ? editDoctorFields : addDoctorFields}\r\n        authHeaders={authHeaders}\r\n      />\r\n\r\n      {/* Modal za dodavanje/uređivanje pacijenata */}\r\n      <DataModal\r\n        show={showPatientModal}\r\n        onClose={() => setShowPatientModal(false)}\r\n        data={editingPatient}\r\n        onSave={editingPatient ? handleUpdatePatient : handleAddPatient}\r\n        title={editingPatient ? 'Edit Patient' : 'Add New Patient'}\r\n        idPrefix=\"patient\"\r\n        fields={editingPatient ? editPatientFields : addPatientFields}\r\n        authHeaders={authHeaders}\r\n      />\r\n\r\n      {/* Modal za dodavanje/uređivanje termina */}\r\n      <DataModal\r\n        show={showTermModal}\r\n        onClose={() => setShowTermModal(false)}\r\n        data={editingTerm}\r\n        onSave={editingTerm ? handleUpdateTerm : handleAddTerm}\r\n        title={editingTerm ? 'Edit Term' : 'Add New Term'}\r\n        idPrefix=\"term\"\r\n        fields={editingTerm ? editTermFields : addTermFields}\r\n        authHeaders={authHeaders}\r\n      />\r\n\r\n      {/* Modal za dodavanje/uređivanje pregleda */}\r\n      <DataModal\r\n        show={showExaminationModal}\r\n        onClose={() => setShowExaminationModal(false)}\r\n        data={editingExamination}\r\n        onSave={editingExamination ? handleUpdateExamination : handleAddExamination}\r\n        title={editingExamination ? 'Edit Examination' : 'Add New Examination'}\r\n        idPrefix=\"examination\"\r\n        fields={editingExamination ? editExaminationFields : addExaminationFields}\r\n        authHeaders={authHeaders}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}