{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useMemo } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    console.log(\"AuthContext useEffect: Provjeravam localStorage za korisničke podatke...\");\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        console.log(\"AuthContext: Učitani korisnički podaci iz localStorage-a:\", parsedUser);\n        if (parsedUser.token) {\n          const decodedToken = jwtDecode(parsedUser.token);\n          if (decodedToken.exp * 1000 < Date.now()) {\n            console.warn(\"AuthContext: JWT token je istekao. Odjavljujem korisnika.\");\n            logoutUser();\n          } else {\n            setUser(parsedUser);\n            console.log(\"AuthContext: Korisnik uspješno učitan i postavljen.\");\n          }\n        } else {\n          console.log(\"AuthContext: Token nije pronađen u pohranjenom korisničkom objektu.\");\n          logoutUser();\n        }\n      } catch (error) {\n        console.error(\"AuthContext: Greška prilikom parsiranja korisničkih podataka ili dekodiranja tokena iz localStorage-a:\", error);\n        logoutUser();\n      }\n    } else {\n      console.log(\"AuthContext: Nema korisničkih podataka u localStorage-u.\");\n    }\n    setLoading(false);\n    console.log(\"AuthContext useEffect: Učitavanje završeno.\");\n  }, []);\n  const login = authResponseData => {\n    console.log(\"AuthContext: Login funkcija pozvana sa podacima:\", authResponseData);\n    const {\n      token,\n      email,\n      fullName,\n      roles,\n      userId,\n      doktorID,\n      pacijentID,\n      grad,\n      specijalizacije,\n      ocjena,\n      iskustvo,\n      radnoVrijeme\n    } = authResponseData;\n    const newUser = {\n      token: token,\n      email: email,\n      fullName: fullName,\n      roles: Array.isArray(roles) ? roles : [],\n      authId: userId,\n      doktorId: doktorID,\n      pacijentId: pacijentID,\n      grad: grad,\n      specijalizacije: specijalizacije,\n      ocjena: ocjena,\n      iskustvo: iskustvo,\n      radnoVrijeme: radnoVrijeme\n    };\n    setUser(newUser);\n    localStorage.setItem('user', JSON.stringify(newUser));\n    console.log(\"AuthContext: Korisničko stanje postavljeno nakon prijave:\", newUser);\n  };\n  const logout = () => {\n    console.log(\"AuthContext: Logout pozvan.\");\n    logoutUser();\n  };\n  const logoutUser = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    console.log(\"AuthContext: Korisnik odjavljen i stanje očišćeno.\");\n  };\n  const hasRole = role => {\n    return user && Array.isArray(user.roles) && user.roles.includes(role);\n  };\n  const contextValue = useMemo(() => ({\n    user,\n    isAuthenticated: !!user && !!user.token,\n    token: user ? user.token : null,\n    userRoles: user ? user.roles : [],\n    userEmail: user ? user.email : null,\n    fullName: user ? user.fullName : null,\n    login,\n    logout,\n    hasRole,\n    loading\n  }), [user, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"jP6h1ytT8fpih4XTRGm7Kl1clR0=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useMemo","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","console","log","storedUser","localStorage","getItem","parsedUser","JSON","parse","token","decodedToken","exp","Date","now","warn","logoutUser","error","login","authResponseData","email","fullName","roles","userId","doktorID","pacijentID","grad","specijalizacije","ocjena","iskustvo","radnoVrijeme","newUser","Array","isArray","authId","doktorId","pacijentId","setItem","stringify","logout","removeItem","hasRole","role","includes","contextValue","isAuthenticated","userRoles","userEmail","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useMemo } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log(\"AuthContext useEffect: Provjeravam localStorage za korisničke podatke...\");\r\n    const storedUser = localStorage.getItem('user');\r\n\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        console.log(\"AuthContext: Učitani korisnički podaci iz localStorage-a:\", parsedUser);\r\n\r\n        if (parsedUser.token) {\r\n          const decodedToken = jwtDecode(parsedUser.token);\r\n          if (decodedToken.exp * 1000 < Date.now()) {\r\n            console.warn(\"AuthContext: JWT token je istekao. Odjavljujem korisnika.\");\r\n            logoutUser();\r\n          } else {\r\n            setUser(parsedUser);\r\n            console.log(\"AuthContext: Korisnik uspješno učitan i postavljen.\");\r\n          }\r\n        } else {\r\n          console.log(\"AuthContext: Token nije pronađen u pohranjenom korisničkom objektu.\");\r\n          logoutUser();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"AuthContext: Greška prilikom parsiranja korisničkih podataka ili dekodiranja tokena iz localStorage-a:\", error);\r\n        logoutUser();\r\n      }\r\n    } else {\r\n      console.log(\"AuthContext: Nema korisničkih podataka u localStorage-u.\");\r\n    }\r\n    setLoading(false);\r\n    console.log(\"AuthContext useEffect: Učitavanje završeno.\");\r\n  }, []);\r\n\r\n  const login = (authResponseData) => {\r\n    console.log(\"AuthContext: Login funkcija pozvana sa podacima:\", authResponseData);\r\n\r\n    const {\r\n      token,\r\n      email,\r\n      fullName,\r\n      roles,\r\n      userId,\r\n      doktorID,\r\n      pacijentID,\r\n      grad,\r\n      specijalizacije,\r\n      ocjena,\r\n      iskustvo,\r\n      radnoVrijeme\r\n    } = authResponseData;\r\n\r\n    const newUser = {\r\n      token: token,\r\n      email: email,\r\n      fullName: fullName,\r\n      roles: Array.isArray(roles) ? roles : [],\r\n      authId: userId,\r\n      doktorId: doktorID,\r\n      pacijentId: pacijentID,\r\n      grad: grad,\r\n      specijalizacije: specijalizacije,\r\n      ocjena: ocjena,\r\n      iskustvo: iskustvo,\r\n      radnoVrijeme: radnoVrijeme\r\n    };\r\n\r\n    setUser(newUser);\r\n    localStorage.setItem('user', JSON.stringify(newUser));\r\n    console.log(\"AuthContext: Korisničko stanje postavljeno nakon prijave:\", newUser);\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log(\"AuthContext: Logout pozvan.\");\r\n    logoutUser();\r\n  };\r\n\r\n  const logoutUser = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    console.log(\"AuthContext: Korisnik odjavljen i stanje očišćeno.\");\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return user && Array.isArray(user.roles) && user.roles.includes(role);\r\n  };\r\n\r\n  const contextValue = useMemo(() => ({\r\n    user,\r\n    isAuthenticated: !!user && !!user.token,\r\n    token: user ? user.token : null,\r\n    userRoles: user ? user.roles : [],\r\n    userEmail: user ? user.email : null,\r\n    fullName: user ? user.fullName : null,\r\n    login,\r\n    logout,\r\n    hasRole,\r\n    loading,\r\n  }), [user, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}