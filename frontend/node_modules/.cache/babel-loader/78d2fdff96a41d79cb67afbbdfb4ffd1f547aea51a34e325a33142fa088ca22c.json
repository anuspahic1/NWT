{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRoles, setUserRoles] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [fullName, setFullName] = useState(null);\n  const [token, setToken] = useState(null);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    const storedRoles = localStorage.getItem('userRoles');\n    const storedEmail = localStorage.getItem('userEmail');\n    const storedFullName = localStorage.getItem('fullName');\n    if (storedToken && storedRoles) {\n      setToken(storedToken);\n      setIsAuthenticated(true);\n      try {\n        setUserRoles(JSON.parse(storedRoles));\n      } catch (e) {\n        console.error(\"Failed to parse userRoles from localStorage\", e);\n        setUserRoles([]);\n      }\n      setUserEmail(storedEmail);\n      setFullName(storedFullName);\n    }\n  }, []);\n  const login = (jwtToken, roles, email, name) => {\n    localStorage.setItem('jwtToken', jwtToken);\n    localStorage.setItem('userRoles', JSON.stringify(roles));\n    localStorage.setItem('userEmail', email);\n    localStorage.setItem('fullName', name);\n    setToken(jwtToken);\n    setIsAuthenticated(true);\n    setUserRoles(roles);\n    setUserEmail(email);\n    setFullName(name);\n  };\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userRoles');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('fullName');\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserRoles([]);\n    setUserEmail(null);\n    setFullName(null);\n  };\n  const hasRole = role => {\n    return userRoles.includes(role);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRoles,\n      userEmail,\n      fullName,\n      token,\n      login,\n      logout,\n      hasRole\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"nu0cE+OCT6lLvUejY+gOV/Rfi44=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRoles","setUserRoles","userEmail","setUserEmail","fullName","setFullName","token","setToken","storedToken","localStorage","getItem","storedRoles","storedEmail","storedFullName","JSON","parse","e","console","error","login","jwtToken","roles","email","name","setItem","stringify","logout","removeItem","hasRole","role","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRoles, setUserRoles] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [fullName, setFullName] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('jwtToken');\r\n    const storedRoles = localStorage.getItem('userRoles');\r\n    const storedEmail = localStorage.getItem('userEmail');\r\n    const storedFullName = localStorage.getItem('fullName');\r\n\r\n    if (storedToken && storedRoles) {\r\n      setToken(storedToken);\r\n      setIsAuthenticated(true);\r\n      try {\r\n        setUserRoles(JSON.parse(storedRoles));\r\n      } catch (e) {\r\n        console.error(\"Failed to parse userRoles from localStorage\", e);\r\n        setUserRoles([]);\r\n      }\r\n      setUserEmail(storedEmail);\r\n      setFullName(storedFullName);\r\n    }\r\n  }, []);\r\n\r\n  const login = (jwtToken, roles, email, name) => {\r\n    localStorage.setItem('jwtToken', jwtToken);\r\n    localStorage.setItem('userRoles', JSON.stringify(roles));\r\n    localStorage.setItem('userEmail', email);\r\n    localStorage.setItem('fullName', name);\r\n    setToken(jwtToken);\r\n    setIsAuthenticated(true);\r\n    setUserRoles(roles);\r\n    setUserEmail(email);\r\n    setFullName(name);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userRoles');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('fullName');\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUserRoles([]);\r\n    setUserEmail(null);\r\n    setFullName(null);\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return userRoles.includes(role);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRoles, userEmail, fullName, token, login, logout, hasRole }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}