{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRoles, setUserRoles] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [fullName, setFullName] = useState(null);\n  const [token, setToken] = useState(null);\n  const [doktorId, setDoktorId] = useState(null);\n  const [loading, setLoading] = useState(true); // NOVO: Dodan loading state, inicijalizovan na true\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    const storedRoles = localStorage.getItem('userRoles');\n    const storedEmail = localStorage.getItem('userEmail');\n    const storedFullName = localStorage.getItem('fullName');\n    const storedDoktorId = localStorage.getItem('doktorId');\n    if (storedToken && storedRoles) {\n      setToken(storedToken);\n      setIsAuthenticated(true);\n      try {\n        setUserRoles(JSON.parse(storedRoles));\n      } catch (e) {\n        console.error(\"Failed to parse userRoles from localStorage\", e);\n        setUserRoles([]);\n      }\n      setUserEmail(storedEmail);\n      setFullName(storedFullName);\n      setDoktorId(parseInt(storedDoktorId));\n    }\n    setLoading(false); // KLJUČNO: Postavi loading na false nakon što se sve provjere završe\n  }, []);\n  const login = (jwtToken, roles, email, name, id) => {\n    localStorage.setItem('jwtToken', jwtToken);\n    localStorage.setItem('userRoles', JSON.stringify(roles));\n    localStorage.setItem('userEmail', email);\n    localStorage.setItem('fullName', name);\n    localStorage.setItem('doktorId', id);\n    setToken(jwtToken);\n    setIsAuthenticated(true);\n    setUserRoles(roles);\n    setUserEmail(email);\n    setFullName(name);\n    setDoktorId(id);\n  };\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userRoles');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('fullName');\n    localStorage.removeItem('doktorId');\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserRoles([]);\n    setUserEmail(null);\n    setFullName(null);\n    setDoktorId(null);\n  };\n  const hasRole = role => {\n    return userRoles.includes(role);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRoles,\n      userEmail,\n      fullName,\n      token,\n      doktorId,\n      login,\n      logout,\n      hasRole,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"uxUiXgc8+nN6HDTmGUgdSYJxhvk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRoles","setUserRoles","userEmail","setUserEmail","fullName","setFullName","token","setToken","doktorId","setDoktorId","loading","setLoading","storedToken","localStorage","getItem","storedRoles","storedEmail","storedFullName","storedDoktorId","JSON","parse","e","console","error","parseInt","login","jwtToken","roles","email","name","id","setItem","stringify","logout","removeItem","hasRole","role","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRoles, setUserRoles] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [fullName, setFullName] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [doktorId, setDoktorId] = useState(null);\r\n  const [loading, setLoading] = useState(true); // NOVO: Dodan loading state, inicijalizovan na true\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('jwtToken');\r\n    const storedRoles = localStorage.getItem('userRoles');\r\n    const storedEmail = localStorage.getItem('userEmail');\r\n    const storedFullName = localStorage.getItem('fullName');\r\n    const storedDoktorId = localStorage.getItem('doktorId');\r\n\r\n    if (storedToken && storedRoles) {\r\n      setToken(storedToken);\r\n      setIsAuthenticated(true);\r\n      try {\r\n        setUserRoles(JSON.parse(storedRoles));\r\n      } catch (e) {\r\n        console.error(\"Failed to parse userRoles from localStorage\", e);\r\n        setUserRoles([]);\r\n      }\r\n      setUserEmail(storedEmail);\r\n      setFullName(storedFullName);\r\n      setDoktorId(parseInt(storedDoktorId));\r\n    }\r\n    setLoading(false); // KLJUČNO: Postavi loading na false nakon što se sve provjere završe\r\n  }, []);\r\n\r\n  const login = (jwtToken, roles, email, name, id) => {\r\n    localStorage.setItem('jwtToken', jwtToken);\r\n    localStorage.setItem('userRoles', JSON.stringify(roles));\r\n    localStorage.setItem('userEmail', email);\r\n    localStorage.setItem('fullName', name);\r\n    localStorage.setItem('doktorId', id);\r\n    setToken(jwtToken);\r\n    setIsAuthenticated(true);\r\n    setUserRoles(roles);\r\n    setUserEmail(email);\r\n    setFullName(name);\r\n    setDoktorId(id);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userRoles');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('fullName');\r\n    localStorage.removeItem('doktorId');\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUserRoles([]);\r\n    setUserEmail(null);\r\n    setFullName(null);\r\n    setDoktorId(null);\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return userRoles.includes(role);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRoles, userEmail, fullName, token, doktorId, login, logout, hasRole, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMqB,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACpD,MAAMC,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACrD,MAAME,WAAW,GAAGH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACrD,MAAMG,cAAc,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAMI,cAAc,GAAGL,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEvD,IAAIF,WAAW,IAAIG,WAAW,EAAE;MAC9BR,QAAQ,CAACK,WAAW,CAAC;MACrBb,kBAAkB,CAAC,IAAI,CAAC;MACxB,IAAI;QACFE,YAAY,CAACkB,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC,CAAC;MACvC,CAAC,CAAC,OAAOM,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEF,CAAC,CAAC;QAC/DpB,YAAY,CAAC,EAAE,CAAC;MAClB;MACAE,YAAY,CAACa,WAAW,CAAC;MACzBX,WAAW,CAACY,cAAc,CAAC;MAC3BR,WAAW,CAACe,QAAQ,CAACN,cAAc,CAAC,CAAC;IACvC;IACAP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,KAAK,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,EAAE,KAAK;IAClDjB,YAAY,CAACkB,OAAO,CAAC,UAAU,EAAEL,QAAQ,CAAC;IAC1Cb,YAAY,CAACkB,OAAO,CAAC,WAAW,EAAEZ,IAAI,CAACa,SAAS,CAACL,KAAK,CAAC,CAAC;IACxDd,YAAY,CAACkB,OAAO,CAAC,WAAW,EAAEH,KAAK,CAAC;IACxCf,YAAY,CAACkB,OAAO,CAAC,UAAU,EAAEF,IAAI,CAAC;IACtChB,YAAY,CAACkB,OAAO,CAAC,UAAU,EAAED,EAAE,CAAC;IACpCvB,QAAQ,CAACmB,QAAQ,CAAC;IAClB3B,kBAAkB,CAAC,IAAI,CAAC;IACxBE,YAAY,CAAC0B,KAAK,CAAC;IACnBxB,YAAY,CAACyB,KAAK,CAAC;IACnBvB,WAAW,CAACwB,IAAI,CAAC;IACjBpB,WAAW,CAACqB,EAAE,CAAC;EACjB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBpB,YAAY,CAACqB,UAAU,CAAC,UAAU,CAAC;IACnCrB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;IACpCrB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;IACpCrB,YAAY,CAACqB,UAAU,CAAC,UAAU,CAAC;IACnCrB,YAAY,CAACqB,UAAU,CAAC,UAAU,CAAC;IACnC3B,QAAQ,CAAC,IAAI,CAAC;IACdR,kBAAkB,CAAC,KAAK,CAAC;IACzBE,YAAY,CAAC,EAAE,CAAC;IAChBE,YAAY,CAAC,IAAI,CAAC;IAClBE,WAAW,CAAC,IAAI,CAAC;IACjBI,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAM0B,OAAO,GAAIC,IAAI,IAAK;IACxB,OAAOpC,SAAS,CAACqC,QAAQ,CAACD,IAAI,CAAC;EACjC,CAAC;EAED,oBACE3C,OAAA,CAACC,WAAW,CAAC4C,QAAQ;IAACC,KAAK,EAAE;MAAEzC,eAAe;MAAEE,SAAS;MAAEE,SAAS;MAAEE,QAAQ;MAAEE,KAAK;MAAEE,QAAQ;MAAEiB,KAAK;MAAEQ,MAAM;MAAEE,OAAO;MAAEzB;IAAQ,CAAE;IAAAd,QAAA,EAChIA;EAAQ;IAAA4C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC9C,EAAA,CArEWF,YAAY;AAAAiD,EAAA,GAAZjD,YAAY;AAuEzB,OAAO,MAAMkD,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOzD,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACoD,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}