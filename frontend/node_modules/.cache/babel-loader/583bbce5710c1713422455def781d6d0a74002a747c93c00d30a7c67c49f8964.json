{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRoles, setUserRoles] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [fullName, setFullName] = useState(null);\n  const [token, setToken] = useState(null);\n  // Promijenjeno: `user` objekat umjesto samo `doktorId`\n  const [user, setUser] = useState(null); // User objekat koji sadrži id, email, doktorId itd.\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    const storedRoles = localStorage.getItem('userRoles');\n    const storedEmail = localStorage.getItem('userEmail');\n    const storedFullName = localStorage.getItem('fullName');\n    const storedDoktorId = localStorage.getItem('doktorId'); // I dalje čitamo, ali ćemo ga dodati u user objekat\n\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        if (decodedToken.exp * 1000 < Date.now()) {\n          console.warn(\"JWT token je istekao. Odjavljujem korisnika.\");\n          logoutUser(); // Koristimo novu helper funkciju\n        } else {\n          setToken(storedToken);\n          setIsAuthenticated(true);\n          try {\n            setUserRoles(JSON.parse(storedRoles));\n          } catch (e) {\n            console.error(\"Greška prilikom parsiranja userRoles iz localStorage-a\", e);\n            setUserRoles([]);\n          }\n          setUserEmail(storedEmail);\n          setFullName(storedFullName);\n\n          // Kreiramo user objekat\n          const userObj = {\n            id: decodedToken.id || null,\n            // Ako JWT ima 'id' polje, koristi ga.\n            email: storedEmail,\n            fullName: storedFullName,\n            // Dodajemo doktorId u user objekat ako postoji\n            doktorId: storedDoktorId ? parseInt(storedDoktorId) : null\n            // Dodaj ovdje sva ostala polja koja želiš imati u user objektu\n          };\n          setUser(userObj);\n        }\n      } catch (error) {\n        console.error(\"Greška prilikom dekodiranja JWT tokena:\", error);\n        logoutUser();\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = (jwtToken, roles, email, name, id) => {\n    // 'id' ovdje bi trebao biti userId iz Auth servisa\n    localStorage.setItem('jwtToken', jwtToken);\n    localStorage.setItem('userRoles', JSON.stringify(roles));\n    localStorage.setItem('userEmail', email);\n    localStorage.setItem('fullName', name);\n    // Ako se prijavljuje doktor, 'id' će biti doktorID iz korisnici-doktori servisa\n    // Ako se prijavljuje pacijent, 'id' će biti pacijentID iz korisnici-doktori servisa\n    // Ako 'id' nije doktorID, ali želimo ga pratiti, preimenujmo ga u npr. entityId ili profilId\n    // Za sada, zadržimo doktorId, ali budi svjesna da AuthContext čuva ID iz KORISNICI-DOKTORI servisa\n    // za profile, ne samo za doktore. Bolje bi bilo da se zove `profileId` ili `entityProfileId`.\n    localStorage.setItem('doktorId', id); // Ovdje je `id` zapravo profilId (doktorID ili pacijentID)\n\n    setToken(jwtToken);\n    setIsAuthenticated(true);\n    setUserRoles(roles);\n    setUserEmail(email);\n    setFullName(name);\n\n    // Kreiramo user objekat prilikom prijave\n    const userObj = {\n      id: id,\n      // Ovo je sada profilId iz Korisnici-Doktori (DoktorID ili PacijentID)\n      email: email,\n      fullName: name,\n      doktorId: null,\n      // Resetuj na null, pa provjeri uloge i postavi\n      pacijentId: null // Dodaj i ovo ako želiš pratiti\n    };\n    if (roles.includes(\"ROLE_DOCTOR\")) {\n      userObj.doktorId = id; // Ako je doktor, ID je doktorId\n    } else if (roles.includes(\"ROLE_PACIJENT\")) {\n      userObj.pacijentId = id; // Ako je pacijent, ID je pacijentId\n    }\n    // Admin nema profilId u smislu doktor/pacijent\n    setUser(userObj);\n  };\n  const logout = () => {\n    logoutUser();\n  };\n\n  // Helper funkcija za logout, da se izbjegne ponavljanje koda\n  const logoutUser = () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userRoles');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('fullName');\n    localStorage.removeItem('doktorId'); // I dalje ga uklanjamo\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserRoles([]);\n    setUserEmail(null);\n    setFullName(null);\n    setUser(null); // Postavi user objekat na null\n  };\n  const hasRole = role => {\n    return userRoles.includes(role);\n  };\n\n  // Vraćamo `user` objekat umjesto samo `doktorId`\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRoles,\n      userEmail,\n      fullName,\n      token,\n      user,\n      login,\n      logout,\n      hasRole,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"JozwJDf5auA2TLEMXI9K9tmK5+U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRoles","setUserRoles","userEmail","setUserEmail","fullName","setFullName","token","setToken","user","setUser","loading","setLoading","storedToken","localStorage","getItem","storedRoles","storedEmail","storedFullName","storedDoktorId","decodedToken","exp","Date","now","console","warn","logoutUser","JSON","parse","e","error","userObj","id","email","doktorId","parseInt","login","jwtToken","roles","name","setItem","stringify","pacijentId","includes","logout","removeItem","hasRole","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRoles, setUserRoles] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [fullName, setFullName] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  // Promijenjeno: `user` objekat umjesto samo `doktorId`\r\n  const [user, setUser] = useState(null); // User objekat koji sadrži id, email, doktorId itd.\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('jwtToken');\r\n    const storedRoles = localStorage.getItem('userRoles');\r\n    const storedEmail = localStorage.getItem('userEmail');\r\n    const storedFullName = localStorage.getItem('fullName');\r\n    const storedDoktorId = localStorage.getItem('doktorId'); // I dalje čitamo, ali ćemo ga dodati u user objekat\r\n\r\n    if (storedToken) {\r\n      try {\r\n        const decodedToken = jwtDecode(storedToken);\r\n        if (decodedToken.exp * 1000 < Date.now()) {\r\n          console.warn(\"JWT token je istekao. Odjavljujem korisnika.\");\r\n          logoutUser(); // Koristimo novu helper funkciju\r\n        } else {\r\n          setToken(storedToken);\r\n          setIsAuthenticated(true);\r\n          try {\r\n            setUserRoles(JSON.parse(storedRoles));\r\n          } catch (e) {\r\n            console.error(\"Greška prilikom parsiranja userRoles iz localStorage-a\", e);\r\n            setUserRoles([]);\r\n          }\r\n          setUserEmail(storedEmail);\r\n          setFullName(storedFullName);\r\n\r\n          // Kreiramo user objekat\r\n          const userObj = {\r\n            id: decodedToken.id || null, // Ako JWT ima 'id' polje, koristi ga.\r\n            email: storedEmail,\r\n            fullName: storedFullName,\r\n            // Dodajemo doktorId u user objekat ako postoji\r\n            doktorId: storedDoktorId ? parseInt(storedDoktorId) : null,\r\n            // Dodaj ovdje sva ostala polja koja želiš imati u user objektu\r\n          };\r\n          setUser(userObj);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Greška prilikom dekodiranja JWT tokena:\", error);\r\n        logoutUser();\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = (jwtToken, roles, email, name, id) => { // 'id' ovdje bi trebao biti userId iz Auth servisa\r\n    localStorage.setItem('jwtToken', jwtToken);\r\n    localStorage.setItem('userRoles', JSON.stringify(roles));\r\n    localStorage.setItem('userEmail', email);\r\n    localStorage.setItem('fullName', name);\r\n    // Ako se prijavljuje doktor, 'id' će biti doktorID iz korisnici-doktori servisa\r\n    // Ako se prijavljuje pacijent, 'id' će biti pacijentID iz korisnici-doktori servisa\r\n    // Ako 'id' nije doktorID, ali želimo ga pratiti, preimenujmo ga u npr. entityId ili profilId\r\n    // Za sada, zadržimo doktorId, ali budi svjesna da AuthContext čuva ID iz KORISNICI-DOKTORI servisa\r\n    // za profile, ne samo za doktore. Bolje bi bilo da se zove `profileId` ili `entityProfileId`.\r\n    localStorage.setItem('doktorId', id); // Ovdje je `id` zapravo profilId (doktorID ili pacijentID)\r\n\r\n    setToken(jwtToken);\r\n    setIsAuthenticated(true);\r\n    setUserRoles(roles);\r\n    setUserEmail(email);\r\n    setFullName(name);\r\n\r\n    // Kreiramo user objekat prilikom prijave\r\n    const userObj = {\r\n      id: id, // Ovo je sada profilId iz Korisnici-Doktori (DoktorID ili PacijentID)\r\n      email: email,\r\n      fullName: name,\r\n      doktorId: null, // Resetuj na null, pa provjeri uloge i postavi\r\n      pacijentId: null // Dodaj i ovo ako želiš pratiti\r\n    };\r\n\r\n    if (roles.includes(\"ROLE_DOCTOR\")) {\r\n        userObj.doktorId = id; // Ako je doktor, ID je doktorId\r\n    } else if (roles.includes(\"ROLE_PACIJENT\")) {\r\n        userObj.pacijentId = id; // Ako je pacijent, ID je pacijentId\r\n    }\r\n    // Admin nema profilId u smislu doktor/pacijent\r\n    setUser(userObj);\r\n  };\r\n\r\n  const logout = () => {\r\n    logoutUser();\r\n  };\r\n\r\n  // Helper funkcija za logout, da se izbjegne ponavljanje koda\r\n  const logoutUser = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userRoles');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('fullName');\r\n    localStorage.removeItem('doktorId'); // I dalje ga uklanjamo\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUserRoles([]);\r\n    setUserEmail(null);\r\n    setFullName(null);\r\n    setUser(null); // Postavi user objekat na null\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return userRoles.includes(role);\r\n  };\r\n\r\n  // Vraćamo `user` objekat umjesto samo `doktorId`\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRoles, userEmail, fullName, token, user, login, logout, hasRole, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}