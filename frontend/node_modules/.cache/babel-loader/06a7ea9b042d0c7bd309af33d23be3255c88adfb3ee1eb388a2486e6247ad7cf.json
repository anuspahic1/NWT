{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adna\\\\Desktop\\\\frontend - Copy\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Uvozimo jwtDecode\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userRoles, setUserRoles] = useState([]);\n  const [userEmail, setUserEmail] = useState(null);\n  const [fullName, setFullName] = useState(null);\n  const [token, setToken] = useState(null);\n  const [doktorId, setDoktorId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    const storedRoles = localStorage.getItem('userRoles');\n    const storedEmail = localStorage.getItem('userEmail');\n    const storedFullName = localStorage.getItem('fullName');\n    const storedDoktorId = localStorage.getItem('doktorId');\n    if (storedToken) {\n      try {\n        const decodedToken = jwtDecode(storedToken);\n        // Provjera isteka tokena\n        if (decodedToken.exp * 1000 < Date.now()) {\n          // Token je istekao, očisti localStorage i postavi neautentificirano stanje\n          console.warn(\"JWT token je istekao. Odjavljujem korisnika.\");\n          localStorage.removeItem('jwtToken');\n          localStorage.removeItem('userRoles');\n          localStorage.removeItem('userEmail');\n          localStorage.removeItem('fullName');\n          localStorage.removeItem('doktorId');\n          setIsAuthenticated(false);\n          setToken(null);\n          setUserRoles([]);\n          setUserEmail(null);\n          setFullName(null);\n          setDoktorId(null);\n        } else {\n          // Token je validan, postavi stanje autentifikacije\n          setToken(storedToken);\n          setIsAuthenticated(true);\n          try {\n            setUserRoles(JSON.parse(storedRoles));\n          } catch (e) {\n            console.error(\"Greška prilikom parsiranja userRoles iz localStorage-a\", e);\n            setUserRoles([]);\n          }\n          setUserEmail(storedEmail);\n          setFullName(storedFullName);\n          setDoktorId(parseInt(storedDoktorId));\n        }\n      } catch (error) {\n        // Greška prilikom dekodiranja tokena (npr. neispravan token)\n        console.error(\"Greška prilikom dekodiranja JWT tokena:\", error);\n        localStorage.removeItem('jwtToken');\n        localStorage.removeItem('userRoles');\n        localStorage.removeItem('userEmail');\n        localStorage.removeItem('fullName');\n        localStorage.removeItem('doktorId');\n        setIsAuthenticated(false);\n        setToken(null);\n        setUserRoles([]);\n        setUserEmail(null);\n        setFullName(null);\n        setDoktorId(null);\n      }\n    }\n    setLoading(false); // Postavi loading na false nakon što se sve provjere završe\n  }, []);\n  const login = (jwtToken, roles, email, name, id) => {\n    localStorage.setItem('jwtToken', jwtToken);\n    localStorage.setItem('userRoles', JSON.stringify(roles));\n    localStorage.setItem('userEmail', email);\n    localStorage.setItem('fullName', name);\n    localStorage.setItem('doktorId', id);\n    setToken(jwtToken);\n    setIsAuthenticated(true);\n    setUserRoles(roles);\n    setUserEmail(email);\n    setFullName(name);\n    setDoktorId(id);\n  };\n  const logout = () => {\n    localStorage.removeItem('jwtToken');\n    localStorage.removeItem('userRoles');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('fullName');\n    localStorage.removeItem('doktorId');\n    setToken(null);\n    setIsAuthenticated(false);\n    setUserRoles([]);\n    setUserEmail(null);\n    setFullName(null);\n    setDoktorId(null);\n  };\n  const hasRole = role => {\n    return userRoles.includes(role);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      userRoles,\n      userEmail,\n      fullName,\n      token,\n      doktorId,\n      login,\n      logout,\n      hasRole,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"uxUiXgc8+nN6HDTmGUgdSYJxhvk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","userRoles","setUserRoles","userEmail","setUserEmail","fullName","setFullName","token","setToken","doktorId","setDoktorId","loading","setLoading","storedToken","localStorage","getItem","storedRoles","storedEmail","storedFullName","storedDoktorId","decodedToken","exp","Date","now","console","warn","removeItem","JSON","parse","e","error","parseInt","login","jwtToken","roles","email","name","id","setItem","stringify","logout","hasRole","role","includes","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Adna/Desktop/frontend - Copy/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode'; // Uvozimo jwtDecode\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [userRoles, setUserRoles] = useState([]);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [fullName, setFullName] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [doktorId, setDoktorId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('jwtToken');\r\n    const storedRoles = localStorage.getItem('userRoles');\r\n    const storedEmail = localStorage.getItem('userEmail');\r\n    const storedFullName = localStorage.getItem('fullName');\r\n    const storedDoktorId = localStorage.getItem('doktorId');\r\n\r\n    if (storedToken) {\r\n      try {\r\n        const decodedToken = jwtDecode(storedToken);\r\n        // Provjera isteka tokena\r\n        if (decodedToken.exp * 1000 < Date.now()) {\r\n          // Token je istekao, očisti localStorage i postavi neautentificirano stanje\r\n          console.warn(\"JWT token je istekao. Odjavljujem korisnika.\");\r\n          localStorage.removeItem('jwtToken');\r\n          localStorage.removeItem('userRoles');\r\n          localStorage.removeItem('userEmail');\r\n          localStorage.removeItem('fullName');\r\n          localStorage.removeItem('doktorId');\r\n          setIsAuthenticated(false);\r\n          setToken(null);\r\n          setUserRoles([]);\r\n          setUserEmail(null);\r\n          setFullName(null);\r\n          setDoktorId(null);\r\n        } else {\r\n          // Token je validan, postavi stanje autentifikacije\r\n          setToken(storedToken);\r\n          setIsAuthenticated(true);\r\n          try {\r\n            setUserRoles(JSON.parse(storedRoles));\r\n          } catch (e) {\r\n            console.error(\"Greška prilikom parsiranja userRoles iz localStorage-a\", e);\r\n            setUserRoles([]);\r\n          }\r\n          setUserEmail(storedEmail);\r\n          setFullName(storedFullName);\r\n          setDoktorId(parseInt(storedDoktorId));\r\n        }\r\n      } catch (error) {\r\n        // Greška prilikom dekodiranja tokena (npr. neispravan token)\r\n        console.error(\"Greška prilikom dekodiranja JWT tokena:\", error);\r\n        localStorage.removeItem('jwtToken');\r\n        localStorage.removeItem('userRoles');\r\n        localStorage.removeItem('userEmail');\r\n        localStorage.removeItem('fullName');\r\n        localStorage.removeItem('doktorId');\r\n        setIsAuthenticated(false);\r\n        setToken(null);\r\n        setUserRoles([]);\r\n        setUserEmail(null);\r\n        setFullName(null);\r\n        setDoktorId(null);\r\n      }\r\n    }\r\n    setLoading(false); // Postavi loading na false nakon što se sve provjere završe\r\n  }, []);\r\n\r\n  const login = (jwtToken, roles, email, name, id) => {\r\n    localStorage.setItem('jwtToken', jwtToken);\r\n    localStorage.setItem('userRoles', JSON.stringify(roles));\r\n    localStorage.setItem('userEmail', email);\r\n    localStorage.setItem('fullName', name);\r\n    localStorage.setItem('doktorId', id);\r\n    setToken(jwtToken);\r\n    setIsAuthenticated(true);\r\n    setUserRoles(roles);\r\n    setUserEmail(email);\r\n    setFullName(name);\r\n    setDoktorId(id);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('userRoles');\r\n    localStorage.removeItem('userEmail');\r\n    localStorage.removeItem('fullName');\r\n    localStorage.removeItem('doktorId');\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setUserRoles([]);\r\n    setUserEmail(null);\r\n    setFullName(null);\r\n    setDoktorId(null);\r\n  };\r\n\r\n  const hasRole = (role) => {\r\n    return userRoles.includes(role);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, userRoles, userEmail, fullName, token, doktorId, login, logout, hasRole, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}